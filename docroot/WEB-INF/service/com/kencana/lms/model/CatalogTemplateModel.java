/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the CatalogTemplate service. Represents a row in the &quot;Kencana_CatalogTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.kencana.lms.model.impl.CatalogTemplateModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.kencana.lms.model.impl.CatalogTemplateImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogTemplate
 * @see com.kencana.lms.model.impl.CatalogTemplateImpl
 * @see com.kencana.lms.model.impl.CatalogTemplateModelImpl
 * @generated
 */
public interface CatalogTemplateModel extends BaseModel<CatalogTemplate> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a catalog template model instance should use the {@link CatalogTemplate} interface instead.
	 */

	/**
	 * Returns the primary key of this catalog template.
	 *
	 * @return the primary key of this catalog template
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this catalog template.
	 *
	 * @param primaryKey the primary key of this catalog template
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the template ID of this catalog template.
	 *
	 * @return the template ID of this catalog template
	 */
	public long getTemplateId();

	/**
	 * Sets the template ID of this catalog template.
	 *
	 * @param templateId the template ID of this catalog template
	 */
	public void setTemplateId(long templateId);

	/**
	 * Returns the template name of this catalog template.
	 *
	 * @return the template name of this catalog template
	 */
	@AutoEscape
	public String getTemplateName();

	/**
	 * Sets the template name of this catalog template.
	 *
	 * @param templateName the template name of this catalog template
	 */
	public void setTemplateName(String templateName);

	/**
	 * Returns the group ID of this catalog template.
	 *
	 * @return the group ID of this catalog template
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this catalog template.
	 *
	 * @param groupId the group ID of this catalog template
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this catalog template.
	 *
	 * @return the company ID of this catalog template
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this catalog template.
	 *
	 * @param companyId the company ID of this catalog template
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the description of this catalog template.
	 *
	 * @return the description of this catalog template
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this catalog template.
	 *
	 * @param description the description of this catalog template
	 */
	public void setDescription(String description);

	/**
	 * Returns the active of this catalog template.
	 *
	 * @return the active of this catalog template
	 */
	public boolean getActive();

	/**
	 * Returns <code>true</code> if this catalog template is active.
	 *
	 * @return <code>true</code> if this catalog template is active; <code>false</code> otherwise
	 */
	public boolean isActive();

	/**
	 * Sets whether this catalog template is active.
	 *
	 * @param active the active of this catalog template
	 */
	public void setActive(boolean active);

	/**
	 * Returns the create by of this catalog template.
	 *
	 * @return the create by of this catalog template
	 */
	public long getCreateBy();

	/**
	 * Sets the create by of this catalog template.
	 *
	 * @param createBy the create by of this catalog template
	 */
	public void setCreateBy(long createBy);

	/**
	 * Returns the created date of this catalog template.
	 *
	 * @return the created date of this catalog template
	 */
	public Date getCreatedDate();

	/**
	 * Sets the created date of this catalog template.
	 *
	 * @param createdDate the created date of this catalog template
	 */
	public void setCreatedDate(Date createdDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.kencana.lms.model.CatalogTemplate catalogTemplate);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.kencana.lms.model.CatalogTemplate> toCacheModel();

	@Override
	public com.kencana.lms.model.CatalogTemplate toEscapedModel();

	@Override
	public com.kencana.lms.model.CatalogTemplate toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}