/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.GroupedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the CatalogItem service. Represents a row in the &quot;Kencana_CatalogItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.kencana.lms.model.impl.CatalogItemModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.kencana.lms.model.impl.CatalogItemImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogItem
 * @see com.kencana.lms.model.impl.CatalogItemImpl
 * @see com.kencana.lms.model.impl.CatalogItemModelImpl
 * @generated
 */
public interface CatalogItemModel extends BaseModel<CatalogItem>, GroupedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a catalog item model instance should use the {@link CatalogItem} interface instead.
	 */

	/**
	 * Returns the primary key of this catalog item.
	 *
	 * @return the primary key of this catalog item
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this catalog item.
	 *
	 * @param primaryKey the primary key of this catalog item
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the catalog item ID of this catalog item.
	 *
	 * @return the catalog item ID of this catalog item
	 */
	public long getCatalogItemId();

	/**
	 * Sets the catalog item ID of this catalog item.
	 *
	 * @param catalogItemId the catalog item ID of this catalog item
	 */
	public void setCatalogItemId(long catalogItemId);

	/**
	 * Returns the catalog ID of this catalog item.
	 *
	 * @return the catalog ID of this catalog item
	 */
	public long getCatalogId();

	/**
	 * Sets the catalog ID of this catalog item.
	 *
	 * @param catalogId the catalog ID of this catalog item
	 */
	public void setCatalogId(long catalogId);

	/**
	 * Returns the catalog title of this catalog item.
	 *
	 * @return the catalog title of this catalog item
	 */
	@AutoEscape
	public String getCatalogTitle();

	/**
	 * Sets the catalog title of this catalog item.
	 *
	 * @param catalogTitle the catalog title of this catalog item
	 */
	public void setCatalogTitle(String catalogTitle);

	/**
	 * Returns the call number of this catalog item.
	 *
	 * @return the call number of this catalog item
	 */
	@AutoEscape
	public String getCallNumber();

	/**
	 * Sets the call number of this catalog item.
	 *
	 * @param callNumber the call number of this catalog item
	 */
	public void setCallNumber(String callNumber);

	/**
	 * Returns the holding library ID of this catalog item.
	 *
	 * @return the holding library ID of this catalog item
	 */
	public long getHoldingLibraryId();

	/**
	 * Sets the holding library ID of this catalog item.
	 *
	 * @param holdingLibraryId the holding library ID of this catalog item
	 */
	public void setHoldingLibraryId(long holdingLibraryId);

	/**
	 * Returns the current library ID of this catalog item.
	 *
	 * @return the current library ID of this catalog item
	 */
	public long getCurrentLibraryId();

	/**
	 * Sets the current library ID of this catalog item.
	 *
	 * @param currentLibraryId the current library ID of this catalog item
	 */
	public void setCurrentLibraryId(long currentLibraryId);

	/**
	 * Returns the barcode of this catalog item.
	 *
	 * @return the barcode of this catalog item
	 */
	@AutoEscape
	public String getBarcode();

	/**
	 * Sets the barcode of this catalog item.
	 *
	 * @param barcode the barcode of this catalog item
	 */
	public void setBarcode(String barcode);

	/**
	 * Returns the copy number of this catalog item.
	 *
	 * @return the copy number of this catalog item
	 */
	public int getCopyNumber();

	/**
	 * Sets the copy number of this catalog item.
	 *
	 * @param copyNumber the copy number of this catalog item
	 */
	public void setCopyNumber(int copyNumber);

	/**
	 * Returns the location ID of this catalog item.
	 *
	 * @return the location ID of this catalog item
	 */
	public long getLocationId();

	/**
	 * Sets the location ID of this catalog item.
	 *
	 * @param locationId the location ID of this catalog item
	 */
	public void setLocationId(long locationId);

	/**
	 * Returns the item category ID of this catalog item.
	 *
	 * @return the item category ID of this catalog item
	 */
	public long getItemCategoryId();

	/**
	 * Sets the item category ID of this catalog item.
	 *
	 * @param itemCategoryId the item category ID of this catalog item
	 */
	public void setItemCategoryId(long itemCategoryId);

	/**
	 * Returns the item type ID of this catalog item.
	 *
	 * @return the item type ID of this catalog item
	 */
	public long getItemTypeId();

	/**
	 * Sets the item type ID of this catalog item.
	 *
	 * @param itemTypeId the item type ID of this catalog item
	 */
	public void setItemTypeId(long itemTypeId);

	/**
	 * Returns the withdrawn status of this catalog item.
	 *
	 * @return the withdrawn status of this catalog item
	 */
	public boolean getWithdrawnStatus();

	/**
	 * Returns <code>true</code> if this catalog item is withdrawn status.
	 *
	 * @return <code>true</code> if this catalog item is withdrawn status; <code>false</code> otherwise
	 */
	public boolean isWithdrawnStatus();

	/**
	 * Sets whether this catalog item is withdrawn status.
	 *
	 * @param withdrawnStatus the withdrawn status of this catalog item
	 */
	public void setWithdrawnStatus(boolean withdrawnStatus);

	/**
	 * Returns the lost status of this catalog item.
	 *
	 * @return the lost status of this catalog item
	 */
	public boolean getLostStatus();

	/**
	 * Returns <code>true</code> if this catalog item is lost status.
	 *
	 * @return <code>true</code> if this catalog item is lost status; <code>false</code> otherwise
	 */
	public boolean isLostStatus();

	/**
	 * Sets whether this catalog item is lost status.
	 *
	 * @param lostStatus the lost status of this catalog item
	 */
	public void setLostStatus(boolean lostStatus);

	/**
	 * Returns the damage status of this catalog item.
	 *
	 * @return the damage status of this catalog item
	 */
	public boolean getDamageStatus();

	/**
	 * Returns <code>true</code> if this catalog item is damage status.
	 *
	 * @return <code>true</code> if this catalog item is damage status; <code>false</code> otherwise
	 */
	public boolean isDamageStatus();

	/**
	 * Sets whether this catalog item is damage status.
	 *
	 * @param damageStatus the damage status of this catalog item
	 */
	public void setDamageStatus(boolean damageStatus);

	/**
	 * Returns the not for loan status of this catalog item.
	 *
	 * @return the not for loan status of this catalog item
	 */
	public boolean getNotForLoanStatus();

	/**
	 * Returns <code>true</code> if this catalog item is not for loan status.
	 *
	 * @return <code>true</code> if this catalog item is not for loan status; <code>false</code> otherwise
	 */
	public boolean isNotForLoanStatus();

	/**
	 * Sets whether this catalog item is not for loan status.
	 *
	 * @param notForLoanStatus the not for loan status of this catalog item
	 */
	public void setNotForLoanStatus(boolean notForLoanStatus);

	/**
	 * Returns the last seen date of this catalog item.
	 *
	 * @return the last seen date of this catalog item
	 */
	public Date getLastSeenDate();

	/**
	 * Sets the last seen date of this catalog item.
	 *
	 * @param lastSeenDate the last seen date of this catalog item
	 */
	public void setLastSeenDate(Date lastSeenDate);

	/**
	 * Returns the withdrawn date of this catalog item.
	 *
	 * @return the withdrawn date of this catalog item
	 */
	public Date getWithdrawnDate();

	/**
	 * Sets the withdrawn date of this catalog item.
	 *
	 * @param withdrawnDate the withdrawn date of this catalog item
	 */
	public void setWithdrawnDate(Date withdrawnDate);

	/**
	 * Returns the lost date of this catalog item.
	 *
	 * @return the lost date of this catalog item
	 */
	public Date getLostDate();

	/**
	 * Sets the lost date of this catalog item.
	 *
	 * @param lostDate the lost date of this catalog item
	 */
	public void setLostDate(Date lostDate);

	/**
	 * Returns the last check out date of this catalog item.
	 *
	 * @return the last check out date of this catalog item
	 */
	public Date getLastCheckOutDate();

	/**
	 * Sets the last check out date of this catalog item.
	 *
	 * @param lastCheckOutDate the last check out date of this catalog item
	 */
	public void setLastCheckOutDate(Date lastCheckOutDate);

	/**
	 * Returns the circulation count of this catalog item.
	 *
	 * @return the circulation count of this catalog item
	 */
	public int getCirculationCount();

	/**
	 * Sets the circulation count of this catalog item.
	 *
	 * @param circulationCount the circulation count of this catalog item
	 */
	public void setCirculationCount(int circulationCount);

	/**
	 * Returns the renewal count of this catalog item.
	 *
	 * @return the renewal count of this catalog item
	 */
	public int getRenewalCount();

	/**
	 * Sets the renewal count of this catalog item.
	 *
	 * @param renewalCount the renewal count of this catalog item
	 */
	public void setRenewalCount(int renewalCount);

	/**
	 * Returns the reserved count of this catalog item.
	 *
	 * @return the reserved count of this catalog item
	 */
	public int getReservedCount();

	/**
	 * Sets the reserved count of this catalog item.
	 *
	 * @param reservedCount the reserved count of this catalog item
	 */
	public void setReservedCount(int reservedCount);

	/**
	 * Returns the checked out date of this catalog item.
	 *
	 * @return the checked out date of this catalog item
	 */
	public Date getCheckedOutDate();

	/**
	 * Sets the checked out date of this catalog item.
	 *
	 * @param checkedOutDate the checked out date of this catalog item
	 */
	public void setCheckedOutDate(Date checkedOutDate);

	/**
	 * Returns the reserved by of this catalog item.
	 *
	 * @return the reserved by of this catalog item
	 */
	public long getReservedBy();

	/**
	 * Sets the reserved by of this catalog item.
	 *
	 * @param reservedBy the reserved by of this catalog item
	 */
	public void setReservedBy(long reservedBy);

	/**
	 * Returns the claim count of this catalog item.
	 *
	 * @return the claim count of this catalog item
	 */
	public Double getClaimCount();

	/**
	 * Sets the claim count of this catalog item.
	 *
	 * @param claimCount the claim count of this catalog item
	 */
	public void setClaimCount(Double claimCount);

	/**
	 * Returns the due date of this catalog item.
	 *
	 * @return the due date of this catalog item
	 */
	public Date getDueDate();

	/**
	 * Sets the due date of this catalog item.
	 *
	 * @param dueDate the due date of this catalog item
	 */
	public void setDueDate(Date dueDate);

	/**
	 * Returns the check out by of this catalog item.
	 *
	 * @return the check out by of this catalog item
	 */
	public long getCheckOutBy();

	/**
	 * Sets the check out by of this catalog item.
	 *
	 * @param checkOutBy the check out by of this catalog item
	 */
	public void setCheckOutBy(long checkOutBy);

	/**
	 * Returns the released of this catalog item.
	 *
	 * @return the released of this catalog item
	 */
	public boolean getReleased();

	/**
	 * Returns <code>true</code> if this catalog item is released.
	 *
	 * @return <code>true</code> if this catalog item is released; <code>false</code> otherwise
	 */
	public boolean isReleased();

	/**
	 * Sets whether this catalog item is released.
	 *
	 * @param released the released of this catalog item
	 */
	public void setReleased(boolean released);

	/**
	 * Returns the release date of this catalog item.
	 *
	 * @return the release date of this catalog item
	 */
	public Date getReleaseDate();

	/**
	 * Sets the release date of this catalog item.
	 *
	 * @param releaseDate the release date of this catalog item
	 */
	public void setReleaseDate(Date releaseDate);

	/**
	 * Returns the release by user ID of this catalog item.
	 *
	 * @return the release by user ID of this catalog item
	 */
	public long getReleaseByUserId();

	/**
	 * Sets the release by user ID of this catalog item.
	 *
	 * @param releaseByUserId the release by user ID of this catalog item
	 */
	public void setReleaseByUserId(long releaseByUserId);

	/**
	 * Returns the release by user uuid of this catalog item.
	 *
	 * @return the release by user uuid of this catalog item
	 * @throws SystemException if a system exception occurred
	 */
	public String getReleaseByUserUuid() throws SystemException;

	/**
	 * Sets the release by user uuid of this catalog item.
	 *
	 * @param releaseByUserUuid the release by user uuid of this catalog item
	 */
	public void setReleaseByUserUuid(String releaseByUserUuid);

	/**
	 * Returns the vendor ID of this catalog item.
	 *
	 * @return the vendor ID of this catalog item
	 */
	public long getVendorId();

	/**
	 * Sets the vendor ID of this catalog item.
	 *
	 * @param vendorId the vendor ID of this catalog item
	 */
	public void setVendorId(long vendorId);

	/**
	 * Returns the invoice ID of this catalog item.
	 *
	 * @return the invoice ID of this catalog item
	 */
	public long getInvoiceId();

	/**
	 * Sets the invoice ID of this catalog item.
	 *
	 * @param invoiceId the invoice ID of this catalog item
	 */
	public void setInvoiceId(long invoiceId);

	/**
	 * Returns the purchase price of this catalog item.
	 *
	 * @return the purchase price of this catalog item
	 */
	public double getPurchasePrice();

	/**
	 * Sets the purchase price of this catalog item.
	 *
	 * @param purchasePrice the purchase price of this catalog item
	 */
	public void setPurchasePrice(double purchasePrice);

	/**
	 * Returns the replacement price of this catalog item.
	 *
	 * @return the replacement price of this catalog item
	 */
	public double getReplacementPrice();

	/**
	 * Sets the replacement price of this catalog item.
	 *
	 * @param replacementPrice the replacement price of this catalog item
	 */
	public void setReplacementPrice(double replacementPrice);

	/**
	 * Returns the currency ID of this catalog item.
	 *
	 * @return the currency ID of this catalog item
	 */
	public long getCurrencyId();

	/**
	 * Sets the currency ID of this catalog item.
	 *
	 * @param currencyId the currency ID of this catalog item
	 */
	public void setCurrencyId(long currencyId);

	/**
	 * Returns the local purchase price of this catalog item.
	 *
	 * @return the local purchase price of this catalog item
	 */
	public double getLocalPurchasePrice();

	/**
	 * Sets the local purchase price of this catalog item.
	 *
	 * @param localPurchasePrice the local purchase price of this catalog item
	 */
	public void setLocalPurchasePrice(double localPurchasePrice);

	/**
	 * Returns the public note of this catalog item.
	 *
	 * @return the public note of this catalog item
	 */
	@AutoEscape
	public String getPublicNote();

	/**
	 * Sets the public note of this catalog item.
	 *
	 * @param publicNote the public note of this catalog item
	 */
	public void setPublicNote(String publicNote);

	/**
	 * Returns the private note of this catalog item.
	 *
	 * @return the private note of this catalog item
	 */
	@AutoEscape
	public String getPrivateNote();

	/**
	 * Sets the private note of this catalog item.
	 *
	 * @param privateNote the private note of this catalog item
	 */
	public void setPrivateNote(String privateNote);

	/**
	 * Returns the company ID of this catalog item.
	 *
	 * @return the company ID of this catalog item
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this catalog item.
	 *
	 * @param companyId the company ID of this catalog item
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this catalog item.
	 *
	 * @return the group ID of this catalog item
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this catalog item.
	 *
	 * @param groupId the group ID of this catalog item
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this catalog item.
	 *
	 * @return the user ID of this catalog item
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this catalog item.
	 *
	 * @param userId the user ID of this catalog item
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this catalog item.
	 *
	 * @return the user uuid of this catalog item
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this catalog item.
	 *
	 * @param userUuid the user uuid of this catalog item
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this catalog item.
	 *
	 * @return the user name of this catalog item
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this catalog item.
	 *
	 * @param userName the user name of this catalog item
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this catalog item.
	 *
	 * @return the create date of this catalog item
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this catalog item.
	 *
	 * @param createDate the create date of this catalog item
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this catalog item.
	 *
	 * @return the modified date of this catalog item
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this catalog item.
	 *
	 * @param modifiedDate the modified date of this catalog item
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the acquired date of this catalog item.
	 *
	 * @return the acquired date of this catalog item
	 */
	public Date getAcquiredDate();

	/**
	 * Sets the acquired date of this catalog item.
	 *
	 * @param acquiredDate the acquired date of this catalog item
	 */
	public void setAcquiredDate(Date acquiredDate);

	/**
	 * Returns the workflow status of this catalog item.
	 *
	 * @return the workflow status of this catalog item
	 */
	public int getWorkflowStatus();

	/**
	 * Sets the workflow status of this catalog item.
	 *
	 * @param workflowStatus the workflow status of this catalog item
	 */
	public void setWorkflowStatus(int workflowStatus);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.kencana.lms.model.CatalogItem catalogItem);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.kencana.lms.model.CatalogItem> toCacheModel();

	@Override
	public com.kencana.lms.model.CatalogItem toEscapedModel();

	@Override
	public com.kencana.lms.model.CatalogItem toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}