/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.CirculationRule;
import com.kencana.lms.model.CirculationRuleModel;
import com.kencana.lms.model.CirculationRuleSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CirculationRule service. Represents a row in the &quot;Kencana_CirculationRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.CirculationRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CirculationRuleImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CirculationRuleImpl
 * @see com.kencana.lms.model.CirculationRule
 * @see com.kencana.lms.model.CirculationRuleModel
 * @generated
 */
@JSON(strict = true)
public class CirculationRuleModelImpl extends BaseModelImpl<CirculationRule>
	implements CirculationRuleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a circulation rule model instance should use the {@link com.kencana.lms.model.CirculationRule} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_CirculationRule";
	public static final Object[][] TABLE_COLUMNS = {
			{ "circulationRuleId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "patronCategoryId", Types.BIGINT },
			{ "itemTypeId", Types.BIGINT },
			{ "itemCategoryId", Types.BIGINT },
			{ "maxCheckoutAllowed", Types.INTEGER },
			{ "renewalCountAllowed", Types.INTEGER },
			{ "reservedCountAllowed", Types.INTEGER },
			{ "periodUnit", Types.INTEGER },
			{ "loanPeriod", Types.INTEGER },
			{ "loanPeriodIfReserved", Types.INTEGER },
			{ "rentalCharge", Types.DOUBLE },
			{ "finePerPeriod", Types.DOUBLE },
			{ "fineGracePeriod", Types.INTEGER },
			{ "maxFineAmount", Types.DOUBLE },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_CirculationRule (circulationRuleId LONG not null primary key,libraryId LONG,companyId LONG,groupId LONG,patronCategoryId LONG,itemTypeId LONG,itemCategoryId LONG,maxCheckoutAllowed INTEGER,renewalCountAllowed INTEGER,reservedCountAllowed INTEGER,periodUnit INTEGER,loanPeriod INTEGER,loanPeriodIfReserved INTEGER,rentalCharge DOUBLE,finePerPeriod DOUBLE,fineGracePeriod INTEGER,maxFineAmount DOUBLE,userId LONG,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_CirculationRule";
	public static final String ORDER_BY_JPQL = " ORDER BY circulationRule.circulationRuleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_CirculationRule.circulationRuleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.CirculationRule"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.CirculationRule"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.CirculationRule"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ITEMCATEGORYID_COLUMN_BITMASK = 4L;
	public static long ITEMTYPEID_COLUMN_BITMASK = 8L;
	public static long LIBRARYID_COLUMN_BITMASK = 16L;
	public static long PATRONCATEGORYID_COLUMN_BITMASK = 32L;
	public static long CIRCULATIONRULEID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CirculationRule toModel(CirculationRuleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CirculationRule model = new CirculationRuleImpl();

		model.setCirculationRuleId(soapModel.getCirculationRuleId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setPatronCategoryId(soapModel.getPatronCategoryId());
		model.setItemTypeId(soapModel.getItemTypeId());
		model.setItemCategoryId(soapModel.getItemCategoryId());
		model.setMaxCheckoutAllowed(soapModel.getMaxCheckoutAllowed());
		model.setRenewalCountAllowed(soapModel.getRenewalCountAllowed());
		model.setReservedCountAllowed(soapModel.getReservedCountAllowed());
		model.setPeriodUnit(soapModel.getPeriodUnit());
		model.setLoanPeriod(soapModel.getLoanPeriod());
		model.setLoanPeriodIfReserved(soapModel.getLoanPeriodIfReserved());
		model.setRentalCharge(soapModel.getRentalCharge());
		model.setFinePerPeriod(soapModel.getFinePerPeriod());
		model.setFineGracePeriod(soapModel.getFineGracePeriod());
		model.setMaxFineAmount(soapModel.getMaxFineAmount());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CirculationRule> toModels(
		CirculationRuleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CirculationRule> models = new ArrayList<CirculationRule>(soapModels.length);

		for (CirculationRuleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.CirculationRule"));

	public CirculationRuleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _circulationRuleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCirculationRuleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _circulationRuleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CirculationRule.class;
	}

	@Override
	public String getModelClassName() {
		return CirculationRule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("circulationRuleId", getCirculationRuleId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("patronCategoryId", getPatronCategoryId());
		attributes.put("itemTypeId", getItemTypeId());
		attributes.put("itemCategoryId", getItemCategoryId());
		attributes.put("maxCheckoutAllowed", getMaxCheckoutAllowed());
		attributes.put("renewalCountAllowed", getRenewalCountAllowed());
		attributes.put("reservedCountAllowed", getReservedCountAllowed());
		attributes.put("periodUnit", getPeriodUnit());
		attributes.put("loanPeriod", getLoanPeriod());
		attributes.put("loanPeriodIfReserved", getLoanPeriodIfReserved());
		attributes.put("rentalCharge", getRentalCharge());
		attributes.put("finePerPeriod", getFinePerPeriod());
		attributes.put("fineGracePeriod", getFineGracePeriod());
		attributes.put("maxFineAmount", getMaxFineAmount());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long circulationRuleId = (Long)attributes.get("circulationRuleId");

		if (circulationRuleId != null) {
			setCirculationRuleId(circulationRuleId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long patronCategoryId = (Long)attributes.get("patronCategoryId");

		if (patronCategoryId != null) {
			setPatronCategoryId(patronCategoryId);
		}

		Long itemTypeId = (Long)attributes.get("itemTypeId");

		if (itemTypeId != null) {
			setItemTypeId(itemTypeId);
		}

		Long itemCategoryId = (Long)attributes.get("itemCategoryId");

		if (itemCategoryId != null) {
			setItemCategoryId(itemCategoryId);
		}

		Integer maxCheckoutAllowed = (Integer)attributes.get(
				"maxCheckoutAllowed");

		if (maxCheckoutAllowed != null) {
			setMaxCheckoutAllowed(maxCheckoutAllowed);
		}

		Integer renewalCountAllowed = (Integer)attributes.get(
				"renewalCountAllowed");

		if (renewalCountAllowed != null) {
			setRenewalCountAllowed(renewalCountAllowed);
		}

		Integer reservedCountAllowed = (Integer)attributes.get(
				"reservedCountAllowed");

		if (reservedCountAllowed != null) {
			setReservedCountAllowed(reservedCountAllowed);
		}

		Integer periodUnit = (Integer)attributes.get("periodUnit");

		if (periodUnit != null) {
			setPeriodUnit(periodUnit);
		}

		Integer loanPeriod = (Integer)attributes.get("loanPeriod");

		if (loanPeriod != null) {
			setLoanPeriod(loanPeriod);
		}

		Integer loanPeriodIfReserved = (Integer)attributes.get(
				"loanPeriodIfReserved");

		if (loanPeriodIfReserved != null) {
			setLoanPeriodIfReserved(loanPeriodIfReserved);
		}

		Double rentalCharge = (Double)attributes.get("rentalCharge");

		if (rentalCharge != null) {
			setRentalCharge(rentalCharge);
		}

		Double finePerPeriod = (Double)attributes.get("finePerPeriod");

		if (finePerPeriod != null) {
			setFinePerPeriod(finePerPeriod);
		}

		Integer fineGracePeriod = (Integer)attributes.get("fineGracePeriod");

		if (fineGracePeriod != null) {
			setFineGracePeriod(fineGracePeriod);
		}

		Double maxFineAmount = (Double)attributes.get("maxFineAmount");

		if (maxFineAmount != null) {
			setMaxFineAmount(maxFineAmount);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getCirculationRuleId() {
		return _circulationRuleId;
	}

	@Override
	public void setCirculationRuleId(long circulationRuleId) {
		_circulationRuleId = circulationRuleId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getPatronCategoryId() {
		return _patronCategoryId;
	}

	@Override
	public void setPatronCategoryId(long patronCategoryId) {
		_columnBitmask |= PATRONCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalPatronCategoryId) {
			_setOriginalPatronCategoryId = true;

			_originalPatronCategoryId = _patronCategoryId;
		}

		_patronCategoryId = patronCategoryId;
	}

	public long getOriginalPatronCategoryId() {
		return _originalPatronCategoryId;
	}

	@JSON
	@Override
	public long getItemTypeId() {
		return _itemTypeId;
	}

	@Override
	public void setItemTypeId(long itemTypeId) {
		_columnBitmask |= ITEMTYPEID_COLUMN_BITMASK;

		if (!_setOriginalItemTypeId) {
			_setOriginalItemTypeId = true;

			_originalItemTypeId = _itemTypeId;
		}

		_itemTypeId = itemTypeId;
	}

	public long getOriginalItemTypeId() {
		return _originalItemTypeId;
	}

	@JSON
	@Override
	public long getItemCategoryId() {
		return _itemCategoryId;
	}

	@Override
	public void setItemCategoryId(long itemCategoryId) {
		_columnBitmask |= ITEMCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalItemCategoryId) {
			_setOriginalItemCategoryId = true;

			_originalItemCategoryId = _itemCategoryId;
		}

		_itemCategoryId = itemCategoryId;
	}

	public long getOriginalItemCategoryId() {
		return _originalItemCategoryId;
	}

	@JSON
	@Override
	public int getMaxCheckoutAllowed() {
		return _maxCheckoutAllowed;
	}

	@Override
	public void setMaxCheckoutAllowed(int maxCheckoutAllowed) {
		_maxCheckoutAllowed = maxCheckoutAllowed;
	}

	@JSON
	@Override
	public int getRenewalCountAllowed() {
		return _renewalCountAllowed;
	}

	@Override
	public void setRenewalCountAllowed(int renewalCountAllowed) {
		_renewalCountAllowed = renewalCountAllowed;
	}

	@JSON
	@Override
	public int getReservedCountAllowed() {
		return _reservedCountAllowed;
	}

	@Override
	public void setReservedCountAllowed(int reservedCountAllowed) {
		_reservedCountAllowed = reservedCountAllowed;
	}

	@JSON
	@Override
	public int getPeriodUnit() {
		return _periodUnit;
	}

	@Override
	public void setPeriodUnit(int periodUnit) {
		_periodUnit = periodUnit;
	}

	@JSON
	@Override
	public int getLoanPeriod() {
		return _loanPeriod;
	}

	@Override
	public void setLoanPeriod(int loanPeriod) {
		_loanPeriod = loanPeriod;
	}

	@JSON
	@Override
	public int getLoanPeriodIfReserved() {
		return _loanPeriodIfReserved;
	}

	@Override
	public void setLoanPeriodIfReserved(int loanPeriodIfReserved) {
		_loanPeriodIfReserved = loanPeriodIfReserved;
	}

	@JSON
	@Override
	public double getRentalCharge() {
		return _rentalCharge;
	}

	@Override
	public void setRentalCharge(double rentalCharge) {
		_rentalCharge = rentalCharge;
	}

	@JSON
	@Override
	public double getFinePerPeriod() {
		return _finePerPeriod;
	}

	@Override
	public void setFinePerPeriod(double finePerPeriod) {
		_finePerPeriod = finePerPeriod;
	}

	@JSON
	@Override
	public int getFineGracePeriod() {
		return _fineGracePeriod;
	}

	@Override
	public void setFineGracePeriod(int fineGracePeriod) {
		_fineGracePeriod = fineGracePeriod;
	}

	@JSON
	@Override
	public double getMaxFineAmount() {
		return _maxFineAmount;
	}

	@Override
	public void setMaxFineAmount(double maxFineAmount) {
		_maxFineAmount = maxFineAmount;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CirculationRule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CirculationRule toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CirculationRule)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CirculationRuleImpl circulationRuleImpl = new CirculationRuleImpl();

		circulationRuleImpl.setCirculationRuleId(getCirculationRuleId());
		circulationRuleImpl.setLibraryId(getLibraryId());
		circulationRuleImpl.setCompanyId(getCompanyId());
		circulationRuleImpl.setGroupId(getGroupId());
		circulationRuleImpl.setPatronCategoryId(getPatronCategoryId());
		circulationRuleImpl.setItemTypeId(getItemTypeId());
		circulationRuleImpl.setItemCategoryId(getItemCategoryId());
		circulationRuleImpl.setMaxCheckoutAllowed(getMaxCheckoutAllowed());
		circulationRuleImpl.setRenewalCountAllowed(getRenewalCountAllowed());
		circulationRuleImpl.setReservedCountAllowed(getReservedCountAllowed());
		circulationRuleImpl.setPeriodUnit(getPeriodUnit());
		circulationRuleImpl.setLoanPeriod(getLoanPeriod());
		circulationRuleImpl.setLoanPeriodIfReserved(getLoanPeriodIfReserved());
		circulationRuleImpl.setRentalCharge(getRentalCharge());
		circulationRuleImpl.setFinePerPeriod(getFinePerPeriod());
		circulationRuleImpl.setFineGracePeriod(getFineGracePeriod());
		circulationRuleImpl.setMaxFineAmount(getMaxFineAmount());
		circulationRuleImpl.setUserId(getUserId());
		circulationRuleImpl.setCreatedDate(getCreatedDate());

		circulationRuleImpl.resetOriginalValues();

		return circulationRuleImpl;
	}

	@Override
	public int compareTo(CirculationRule circulationRule) {
		long primaryKey = circulationRule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CirculationRule)) {
			return false;
		}

		CirculationRule circulationRule = (CirculationRule)obj;

		long primaryKey = circulationRule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CirculationRuleModelImpl circulationRuleModelImpl = this;

		circulationRuleModelImpl._originalLibraryId = circulationRuleModelImpl._libraryId;

		circulationRuleModelImpl._setOriginalLibraryId = false;

		circulationRuleModelImpl._originalCompanyId = circulationRuleModelImpl._companyId;

		circulationRuleModelImpl._setOriginalCompanyId = false;

		circulationRuleModelImpl._originalGroupId = circulationRuleModelImpl._groupId;

		circulationRuleModelImpl._setOriginalGroupId = false;

		circulationRuleModelImpl._originalPatronCategoryId = circulationRuleModelImpl._patronCategoryId;

		circulationRuleModelImpl._setOriginalPatronCategoryId = false;

		circulationRuleModelImpl._originalItemTypeId = circulationRuleModelImpl._itemTypeId;

		circulationRuleModelImpl._setOriginalItemTypeId = false;

		circulationRuleModelImpl._originalItemCategoryId = circulationRuleModelImpl._itemCategoryId;

		circulationRuleModelImpl._setOriginalItemCategoryId = false;

		circulationRuleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CirculationRule> toCacheModel() {
		CirculationRuleCacheModel circulationRuleCacheModel = new CirculationRuleCacheModel();

		circulationRuleCacheModel.circulationRuleId = getCirculationRuleId();

		circulationRuleCacheModel.libraryId = getLibraryId();

		circulationRuleCacheModel.companyId = getCompanyId();

		circulationRuleCacheModel.groupId = getGroupId();

		circulationRuleCacheModel.patronCategoryId = getPatronCategoryId();

		circulationRuleCacheModel.itemTypeId = getItemTypeId();

		circulationRuleCacheModel.itemCategoryId = getItemCategoryId();

		circulationRuleCacheModel.maxCheckoutAllowed = getMaxCheckoutAllowed();

		circulationRuleCacheModel.renewalCountAllowed = getRenewalCountAllowed();

		circulationRuleCacheModel.reservedCountAllowed = getReservedCountAllowed();

		circulationRuleCacheModel.periodUnit = getPeriodUnit();

		circulationRuleCacheModel.loanPeriod = getLoanPeriod();

		circulationRuleCacheModel.loanPeriodIfReserved = getLoanPeriodIfReserved();

		circulationRuleCacheModel.rentalCharge = getRentalCharge();

		circulationRuleCacheModel.finePerPeriod = getFinePerPeriod();

		circulationRuleCacheModel.fineGracePeriod = getFineGracePeriod();

		circulationRuleCacheModel.maxFineAmount = getMaxFineAmount();

		circulationRuleCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			circulationRuleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			circulationRuleCacheModel.createdDate = Long.MIN_VALUE;
		}

		return circulationRuleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{circulationRuleId=");
		sb.append(getCirculationRuleId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", patronCategoryId=");
		sb.append(getPatronCategoryId());
		sb.append(", itemTypeId=");
		sb.append(getItemTypeId());
		sb.append(", itemCategoryId=");
		sb.append(getItemCategoryId());
		sb.append(", maxCheckoutAllowed=");
		sb.append(getMaxCheckoutAllowed());
		sb.append(", renewalCountAllowed=");
		sb.append(getRenewalCountAllowed());
		sb.append(", reservedCountAllowed=");
		sb.append(getReservedCountAllowed());
		sb.append(", periodUnit=");
		sb.append(getPeriodUnit());
		sb.append(", loanPeriod=");
		sb.append(getLoanPeriod());
		sb.append(", loanPeriodIfReserved=");
		sb.append(getLoanPeriodIfReserved());
		sb.append(", rentalCharge=");
		sb.append(getRentalCharge());
		sb.append(", finePerPeriod=");
		sb.append(getFinePerPeriod());
		sb.append(", fineGracePeriod=");
		sb.append(getFineGracePeriod());
		sb.append(", maxFineAmount=");
		sb.append(getMaxFineAmount());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.CirculationRule");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>circulationRuleId</column-name><column-value><![CDATA[");
		sb.append(getCirculationRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronCategoryId</column-name><column-value><![CDATA[");
		sb.append(getPatronCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
		sb.append(getItemTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCategoryId</column-name><column-value><![CDATA[");
		sb.append(getItemCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxCheckoutAllowed</column-name><column-value><![CDATA[");
		sb.append(getMaxCheckoutAllowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>renewalCountAllowed</column-name><column-value><![CDATA[");
		sb.append(getRenewalCountAllowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reservedCountAllowed</column-name><column-value><![CDATA[");
		sb.append(getReservedCountAllowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodUnit</column-name><column-value><![CDATA[");
		sb.append(getPeriodUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loanPeriod</column-name><column-value><![CDATA[");
		sb.append(getLoanPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loanPeriodIfReserved</column-name><column-value><![CDATA[");
		sb.append(getLoanPeriodIfReserved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rentalCharge</column-name><column-value><![CDATA[");
		sb.append(getRentalCharge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finePerPeriod</column-name><column-value><![CDATA[");
		sb.append(getFinePerPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fineGracePeriod</column-name><column-value><![CDATA[");
		sb.append(getFineGracePeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxFineAmount</column-name><column-value><![CDATA[");
		sb.append(getMaxFineAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CirculationRule.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CirculationRule.class
		};
	private long _circulationRuleId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _patronCategoryId;
	private long _originalPatronCategoryId;
	private boolean _setOriginalPatronCategoryId;
	private long _itemTypeId;
	private long _originalItemTypeId;
	private boolean _setOriginalItemTypeId;
	private long _itemCategoryId;
	private long _originalItemCategoryId;
	private boolean _setOriginalItemCategoryId;
	private int _maxCheckoutAllowed;
	private int _renewalCountAllowed;
	private int _reservedCountAllowed;
	private int _periodUnit;
	private int _loanPeriod;
	private int _loanPeriodIfReserved;
	private double _rentalCharge;
	private double _finePerPeriod;
	private int _fineGracePeriod;
	private double _maxFineAmount;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private long _columnBitmask;
	private CirculationRule _escapedModel;
}