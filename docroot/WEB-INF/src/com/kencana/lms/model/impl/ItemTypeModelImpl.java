/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.ItemType;
import com.kencana.lms.model.ItemTypeModel;
import com.kencana.lms.model.ItemTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ItemType service. Represents a row in the &quot;Kencana_ItemType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.ItemTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ItemTypeImpl
 * @see com.kencana.lms.model.ItemType
 * @see com.kencana.lms.model.ItemTypeModel
 * @generated
 */
@JSON(strict = true)
public class ItemTypeModelImpl extends BaseModelImpl<ItemType>
	implements ItemTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item type model instance should use the {@link com.kencana.lms.model.ItemType} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_ItemType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemTypeId", Types.BIGINT },
			{ "itemTypeName", Types.VARCHAR },
			{ "notForLoan", Types.BOOLEAN },
			{ "coverId", Types.BIGINT },
			{ "checkoutMessage", Types.VARCHAR },
			{ "checkinMessage", Types.VARCHAR },
			{ "rentalRate", Types.DOUBLE },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_ItemType (itemTypeId LONG not null primary key,itemTypeName VARCHAR(75) null,notForLoan BOOLEAN,coverId LONG,checkoutMessage VARCHAR(75) null,checkinMessage VARCHAR(75) null,rentalRate DOUBLE,companyId LONG,groupId LONG,userId LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_ItemType";
	public static final String ORDER_BY_JPQL = " ORDER BY itemType.itemTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_ItemType.itemTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.ItemType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.ItemType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.ItemType"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ITEMTYPEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemType toModel(ItemTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemType model = new ItemTypeImpl();

		model.setItemTypeId(soapModel.getItemTypeId());
		model.setItemTypeName(soapModel.getItemTypeName());
		model.setNotForLoan(soapModel.getNotForLoan());
		model.setCoverId(soapModel.getCoverId());
		model.setCheckoutMessage(soapModel.getCheckoutMessage());
		model.setCheckinMessage(soapModel.getCheckinMessage());
		model.setRentalRate(soapModel.getRentalRate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemType> toModels(ItemTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ItemType> models = new ArrayList<ItemType>(soapModels.length);

		for (ItemTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.ItemType"));

	public ItemTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemType.class;
	}

	@Override
	public String getModelClassName() {
		return ItemType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemTypeId", getItemTypeId());
		attributes.put("itemTypeName", getItemTypeName());
		attributes.put("notForLoan", getNotForLoan());
		attributes.put("coverId", getCoverId());
		attributes.put("checkoutMessage", getCheckoutMessage());
		attributes.put("checkinMessage", getCheckinMessage());
		attributes.put("rentalRate", getRentalRate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemTypeId = (Long)attributes.get("itemTypeId");

		if (itemTypeId != null) {
			setItemTypeId(itemTypeId);
		}

		String itemTypeName = (String)attributes.get("itemTypeName");

		if (itemTypeName != null) {
			setItemTypeName(itemTypeName);
		}

		Boolean notForLoan = (Boolean)attributes.get("notForLoan");

		if (notForLoan != null) {
			setNotForLoan(notForLoan);
		}

		Long coverId = (Long)attributes.get("coverId");

		if (coverId != null) {
			setCoverId(coverId);
		}

		String checkoutMessage = (String)attributes.get("checkoutMessage");

		if (checkoutMessage != null) {
			setCheckoutMessage(checkoutMessage);
		}

		String checkinMessage = (String)attributes.get("checkinMessage");

		if (checkinMessage != null) {
			setCheckinMessage(checkinMessage);
		}

		Double rentalRate = (Double)attributes.get("rentalRate");

		if (rentalRate != null) {
			setRentalRate(rentalRate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getItemTypeId() {
		return _itemTypeId;
	}

	@Override
	public void setItemTypeId(long itemTypeId) {
		_itemTypeId = itemTypeId;
	}

	@JSON
	@Override
	public String getItemTypeName() {
		if (_itemTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemTypeName;
		}
	}

	@Override
	public void setItemTypeName(String itemTypeName) {
		_itemTypeName = itemTypeName;
	}

	@JSON
	@Override
	public boolean getNotForLoan() {
		return _notForLoan;
	}

	@Override
	public boolean isNotForLoan() {
		return _notForLoan;
	}

	@Override
	public void setNotForLoan(boolean notForLoan) {
		_notForLoan = notForLoan;
	}

	@JSON
	@Override
	public long getCoverId() {
		return _coverId;
	}

	@Override
	public void setCoverId(long coverId) {
		_coverId = coverId;
	}

	@JSON
	@Override
	public String getCheckoutMessage() {
		if (_checkoutMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkoutMessage;
		}
	}

	@Override
	public void setCheckoutMessage(String checkoutMessage) {
		_checkoutMessage = checkoutMessage;
	}

	@JSON
	@Override
	public String getCheckinMessage() {
		if (_checkinMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkinMessage;
		}
	}

	@Override
	public void setCheckinMessage(String checkinMessage) {
		_checkinMessage = checkinMessage;
	}

	@JSON
	@Override
	public Double getRentalRate() {
		return _rentalRate;
	}

	@Override
	public void setRentalRate(Double rentalRate) {
		_rentalRate = rentalRate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ItemType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemTypeImpl itemTypeImpl = new ItemTypeImpl();

		itemTypeImpl.setItemTypeId(getItemTypeId());
		itemTypeImpl.setItemTypeName(getItemTypeName());
		itemTypeImpl.setNotForLoan(getNotForLoan());
		itemTypeImpl.setCoverId(getCoverId());
		itemTypeImpl.setCheckoutMessage(getCheckoutMessage());
		itemTypeImpl.setCheckinMessage(getCheckinMessage());
		itemTypeImpl.setRentalRate(getRentalRate());
		itemTypeImpl.setCompanyId(getCompanyId());
		itemTypeImpl.setGroupId(getGroupId());
		itemTypeImpl.setUserId(getUserId());
		itemTypeImpl.setCreateDate(getCreateDate());

		itemTypeImpl.resetOriginalValues();

		return itemTypeImpl;
	}

	@Override
	public int compareTo(ItemType itemType) {
		long primaryKey = itemType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemType)) {
			return false;
		}

		ItemType itemType = (ItemType)obj;

		long primaryKey = itemType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ItemTypeModelImpl itemTypeModelImpl = this;

		itemTypeModelImpl._originalCompanyId = itemTypeModelImpl._companyId;

		itemTypeModelImpl._setOriginalCompanyId = false;

		itemTypeModelImpl._originalGroupId = itemTypeModelImpl._groupId;

		itemTypeModelImpl._setOriginalGroupId = false;

		itemTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemType> toCacheModel() {
		ItemTypeCacheModel itemTypeCacheModel = new ItemTypeCacheModel();

		itemTypeCacheModel.itemTypeId = getItemTypeId();

		itemTypeCacheModel.itemTypeName = getItemTypeName();

		String itemTypeName = itemTypeCacheModel.itemTypeName;

		if ((itemTypeName != null) && (itemTypeName.length() == 0)) {
			itemTypeCacheModel.itemTypeName = null;
		}

		itemTypeCacheModel.notForLoan = getNotForLoan();

		itemTypeCacheModel.coverId = getCoverId();

		itemTypeCacheModel.checkoutMessage = getCheckoutMessage();

		String checkoutMessage = itemTypeCacheModel.checkoutMessage;

		if ((checkoutMessage != null) && (checkoutMessage.length() == 0)) {
			itemTypeCacheModel.checkoutMessage = null;
		}

		itemTypeCacheModel.checkinMessage = getCheckinMessage();

		String checkinMessage = itemTypeCacheModel.checkinMessage;

		if ((checkinMessage != null) && (checkinMessage.length() == 0)) {
			itemTypeCacheModel.checkinMessage = null;
		}

		itemTypeCacheModel.rentalRate = getRentalRate();

		itemTypeCacheModel.companyId = getCompanyId();

		itemTypeCacheModel.groupId = getGroupId();

		itemTypeCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			itemTypeCacheModel.createDate = createDate.getTime();
		}
		else {
			itemTypeCacheModel.createDate = Long.MIN_VALUE;
		}

		return itemTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{itemTypeId=");
		sb.append(getItemTypeId());
		sb.append(", itemTypeName=");
		sb.append(getItemTypeName());
		sb.append(", notForLoan=");
		sb.append(getNotForLoan());
		sb.append(", coverId=");
		sb.append(getCoverId());
		sb.append(", checkoutMessage=");
		sb.append(getCheckoutMessage());
		sb.append(", checkinMessage=");
		sb.append(getCheckinMessage());
		sb.append(", rentalRate=");
		sb.append(getRentalRate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.ItemType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
		sb.append(getItemTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemTypeName</column-name><column-value><![CDATA[");
		sb.append(getItemTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notForLoan</column-name><column-value><![CDATA[");
		sb.append(getNotForLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverId</column-name><column-value><![CDATA[");
		sb.append(getCoverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkoutMessage</column-name><column-value><![CDATA[");
		sb.append(getCheckoutMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkinMessage</column-name><column-value><![CDATA[");
		sb.append(getCheckinMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rentalRate</column-name><column-value><![CDATA[");
		sb.append(getRentalRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ItemType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemType.class
		};
	private long _itemTypeId;
	private String _itemTypeName;
	private boolean _notForLoan;
	private long _coverId;
	private String _checkoutMessage;
	private String _checkinMessage;
	private Double _rentalRate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private long _columnBitmask;
	private ItemType _escapedModel;
}