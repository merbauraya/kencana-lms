/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.CatalogTemplateSubfield;
import com.kencana.lms.model.CatalogTemplateSubfieldModel;
import com.kencana.lms.model.CatalogTemplateSubfieldSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CatalogTemplateSubfield service. Represents a row in the &quot;Kencana_CatalogTemplateSubfield&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.CatalogTemplateSubfieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogTemplateSubfieldImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogTemplateSubfieldImpl
 * @see com.kencana.lms.model.CatalogTemplateSubfield
 * @see com.kencana.lms.model.CatalogTemplateSubfieldModel
 * @generated
 */
@JSON(strict = true)
public class CatalogTemplateSubfieldModelImpl extends BaseModelImpl<CatalogTemplateSubfield>
	implements CatalogTemplateSubfieldModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a catalog template subfield model instance should use the {@link com.kencana.lms.model.CatalogTemplateSubfield} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_CatalogTemplateSubfield";
	public static final Object[][] TABLE_COLUMNS = {
			{ "catalogTemplateSubfieldId", Types.BIGINT },
			{ "catalogTemplateTagId", Types.BIGINT },
			{ "subfield", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "repeatable", Types.BOOLEAN },
			{ "mandatory", Types.BOOLEAN },
			{ "isURL", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_CatalogTemplateSubfield (catalogTemplateSubfieldId LONG not null primary key,catalogTemplateTagId LONG,subfield VARCHAR(75) null,groupId LONG,companyId LONG,repeatable BOOLEAN,mandatory BOOLEAN,isURL BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_CatalogTemplateSubfield";
	public static final String ORDER_BY_JPQL = " ORDER BY catalogTemplateSubfield.subfield ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_CatalogTemplateSubfield.subfield ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.CatalogTemplateSubfield"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.CatalogTemplateSubfield"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.CatalogTemplateSubfield"),
			true);
	public static long CATALOGTEMPLATETAGID_COLUMN_BITMASK = 1L;
	public static long SUBFIELD_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CatalogTemplateSubfield toModel(
		CatalogTemplateSubfieldSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CatalogTemplateSubfield model = new CatalogTemplateSubfieldImpl();

		model.setCatalogTemplateSubfieldId(soapModel.getCatalogTemplateSubfieldId());
		model.setCatalogTemplateTagId(soapModel.getCatalogTemplateTagId());
		model.setSubfield(soapModel.getSubfield());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setRepeatable(soapModel.getRepeatable());
		model.setMandatory(soapModel.getMandatory());
		model.setIsURL(soapModel.getIsURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CatalogTemplateSubfield> toModels(
		CatalogTemplateSubfieldSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CatalogTemplateSubfield> models = new ArrayList<CatalogTemplateSubfield>(soapModels.length);

		for (CatalogTemplateSubfieldSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.CatalogTemplateSubfield"));

	public CatalogTemplateSubfieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catalogTemplateSubfieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatalogTemplateSubfieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catalogTemplateSubfieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CatalogTemplateSubfield.class;
	}

	@Override
	public String getModelClassName() {
		return CatalogTemplateSubfield.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("catalogTemplateSubfieldId",
			getCatalogTemplateSubfieldId());
		attributes.put("catalogTemplateTagId", getCatalogTemplateTagId());
		attributes.put("subfield", getSubfield());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("repeatable", getRepeatable());
		attributes.put("mandatory", getMandatory());
		attributes.put("isURL", getIsURL());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long catalogTemplateSubfieldId = (Long)attributes.get(
				"catalogTemplateSubfieldId");

		if (catalogTemplateSubfieldId != null) {
			setCatalogTemplateSubfieldId(catalogTemplateSubfieldId);
		}

		Long catalogTemplateTagId = (Long)attributes.get("catalogTemplateTagId");

		if (catalogTemplateTagId != null) {
			setCatalogTemplateTagId(catalogTemplateTagId);
		}

		String subfield = (String)attributes.get("subfield");

		if (subfield != null) {
			setSubfield(subfield);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Boolean repeatable = (Boolean)attributes.get("repeatable");

		if (repeatable != null) {
			setRepeatable(repeatable);
		}

		Boolean mandatory = (Boolean)attributes.get("mandatory");

		if (mandatory != null) {
			setMandatory(mandatory);
		}

		Boolean isURL = (Boolean)attributes.get("isURL");

		if (isURL != null) {
			setIsURL(isURL);
		}
	}

	@JSON
	@Override
	public long getCatalogTemplateSubfieldId() {
		return _catalogTemplateSubfieldId;
	}

	@Override
	public void setCatalogTemplateSubfieldId(long catalogTemplateSubfieldId) {
		_catalogTemplateSubfieldId = catalogTemplateSubfieldId;
	}

	@JSON
	@Override
	public long getCatalogTemplateTagId() {
		return _catalogTemplateTagId;
	}

	@Override
	public void setCatalogTemplateTagId(long catalogTemplateTagId) {
		_columnBitmask |= CATALOGTEMPLATETAGID_COLUMN_BITMASK;

		if (!_setOriginalCatalogTemplateTagId) {
			_setOriginalCatalogTemplateTagId = true;

			_originalCatalogTemplateTagId = _catalogTemplateTagId;
		}

		_catalogTemplateTagId = catalogTemplateTagId;
	}

	public long getOriginalCatalogTemplateTagId() {
		return _originalCatalogTemplateTagId;
	}

	@JSON
	@Override
	public String getSubfield() {
		if (_subfield == null) {
			return StringPool.BLANK;
		}
		else {
			return _subfield;
		}
	}

	@Override
	public void setSubfield(String subfield) {
		_columnBitmask = -1L;

		_subfield = subfield;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public boolean getRepeatable() {
		return _repeatable;
	}

	@Override
	public boolean isRepeatable() {
		return _repeatable;
	}

	@Override
	public void setRepeatable(boolean repeatable) {
		_repeatable = repeatable;
	}

	@JSON
	@Override
	public boolean getMandatory() {
		return _mandatory;
	}

	@Override
	public boolean isMandatory() {
		return _mandatory;
	}

	@Override
	public void setMandatory(boolean mandatory) {
		_mandatory = mandatory;
	}

	@JSON
	@Override
	public boolean getIsURL() {
		return _isURL;
	}

	@Override
	public boolean isIsURL() {
		return _isURL;
	}

	@Override
	public void setIsURL(boolean isURL) {
		_isURL = isURL;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CatalogTemplateSubfield.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CatalogTemplateSubfield toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CatalogTemplateSubfield)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CatalogTemplateSubfieldImpl catalogTemplateSubfieldImpl = new CatalogTemplateSubfieldImpl();

		catalogTemplateSubfieldImpl.setCatalogTemplateSubfieldId(getCatalogTemplateSubfieldId());
		catalogTemplateSubfieldImpl.setCatalogTemplateTagId(getCatalogTemplateTagId());
		catalogTemplateSubfieldImpl.setSubfield(getSubfield());
		catalogTemplateSubfieldImpl.setGroupId(getGroupId());
		catalogTemplateSubfieldImpl.setCompanyId(getCompanyId());
		catalogTemplateSubfieldImpl.setRepeatable(getRepeatable());
		catalogTemplateSubfieldImpl.setMandatory(getMandatory());
		catalogTemplateSubfieldImpl.setIsURL(getIsURL());

		catalogTemplateSubfieldImpl.resetOriginalValues();

		return catalogTemplateSubfieldImpl;
	}

	@Override
	public int compareTo(CatalogTemplateSubfield catalogTemplateSubfield) {
		int value = 0;

		value = getSubfield()
					.compareToIgnoreCase(catalogTemplateSubfield.getSubfield());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CatalogTemplateSubfield)) {
			return false;
		}

		CatalogTemplateSubfield catalogTemplateSubfield = (CatalogTemplateSubfield)obj;

		long primaryKey = catalogTemplateSubfield.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CatalogTemplateSubfieldModelImpl catalogTemplateSubfieldModelImpl = this;

		catalogTemplateSubfieldModelImpl._originalCatalogTemplateTagId = catalogTemplateSubfieldModelImpl._catalogTemplateTagId;

		catalogTemplateSubfieldModelImpl._setOriginalCatalogTemplateTagId = false;

		catalogTemplateSubfieldModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CatalogTemplateSubfield> toCacheModel() {
		CatalogTemplateSubfieldCacheModel catalogTemplateSubfieldCacheModel = new CatalogTemplateSubfieldCacheModel();

		catalogTemplateSubfieldCacheModel.catalogTemplateSubfieldId = getCatalogTemplateSubfieldId();

		catalogTemplateSubfieldCacheModel.catalogTemplateTagId = getCatalogTemplateTagId();

		catalogTemplateSubfieldCacheModel.subfield = getSubfield();

		String subfield = catalogTemplateSubfieldCacheModel.subfield;

		if ((subfield != null) && (subfield.length() == 0)) {
			catalogTemplateSubfieldCacheModel.subfield = null;
		}

		catalogTemplateSubfieldCacheModel.groupId = getGroupId();

		catalogTemplateSubfieldCacheModel.companyId = getCompanyId();

		catalogTemplateSubfieldCacheModel.repeatable = getRepeatable();

		catalogTemplateSubfieldCacheModel.mandatory = getMandatory();

		catalogTemplateSubfieldCacheModel.isURL = getIsURL();

		return catalogTemplateSubfieldCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{catalogTemplateSubfieldId=");
		sb.append(getCatalogTemplateSubfieldId());
		sb.append(", catalogTemplateTagId=");
		sb.append(getCatalogTemplateTagId());
		sb.append(", subfield=");
		sb.append(getSubfield());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", repeatable=");
		sb.append(getRepeatable());
		sb.append(", mandatory=");
		sb.append(getMandatory());
		sb.append(", isURL=");
		sb.append(getIsURL());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.CatalogTemplateSubfield");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>catalogTemplateSubfieldId</column-name><column-value><![CDATA[");
		sb.append(getCatalogTemplateSubfieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catalogTemplateTagId</column-name><column-value><![CDATA[");
		sb.append(getCatalogTemplateTagId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subfield</column-name><column-value><![CDATA[");
		sb.append(getSubfield());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repeatable</column-name><column-value><![CDATA[");
		sb.append(getRepeatable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mandatory</column-name><column-value><![CDATA[");
		sb.append(getMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isURL</column-name><column-value><![CDATA[");
		sb.append(getIsURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CatalogTemplateSubfield.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CatalogTemplateSubfield.class
		};
	private long _catalogTemplateSubfieldId;
	private long _catalogTemplateTagId;
	private long _originalCatalogTemplateTagId;
	private boolean _setOriginalCatalogTemplateTagId;
	private String _subfield;
	private long _groupId;
	private long _companyId;
	private boolean _repeatable;
	private boolean _mandatory;
	private boolean _isURL;
	private long _columnBitmask;
	private CatalogTemplateSubfield _escapedModel;
}