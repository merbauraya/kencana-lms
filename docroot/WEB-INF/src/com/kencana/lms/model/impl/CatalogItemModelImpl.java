/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.CatalogItem;
import com.kencana.lms.model.CatalogItemModel;
import com.kencana.lms.model.CatalogItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CatalogItem service. Represents a row in the &quot;Kencana_CatalogItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.CatalogItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogItemImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogItemImpl
 * @see com.kencana.lms.model.CatalogItem
 * @see com.kencana.lms.model.CatalogItemModel
 * @generated
 */
@JSON(strict = true)
public class CatalogItemModelImpl extends BaseModelImpl<CatalogItem>
	implements CatalogItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a catalog item model instance should use the {@link com.kencana.lms.model.CatalogItem} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_CatalogItem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "catalogItemId", Types.BIGINT },
			{ "catalogId", Types.BIGINT },
			{ "catalogTitle", Types.VARCHAR },
			{ "callNumber", Types.VARCHAR },
			{ "holdingLibraryId", Types.BIGINT },
			{ "currentLibraryId", Types.BIGINT },
			{ "barcode", Types.VARCHAR },
			{ "copyNumber", Types.INTEGER },
			{ "locationId", Types.BIGINT },
			{ "itemCategoryId", Types.BIGINT },
			{ "itemTypeId", Types.BIGINT },
			{ "withdrawnStatus", Types.BOOLEAN },
			{ "lostStatus", Types.BOOLEAN },
			{ "damageStatus", Types.BOOLEAN },
			{ "notForLoanStatus", Types.BOOLEAN },
			{ "lastSeenDate", Types.TIMESTAMP },
			{ "withdrawnDate", Types.TIMESTAMP },
			{ "lostDate", Types.TIMESTAMP },
			{ "lastCheckOutDate", Types.TIMESTAMP },
			{ "circulationCount", Types.INTEGER },
			{ "renewalCount", Types.INTEGER },
			{ "reservedCount", Types.INTEGER },
			{ "checkedOutDate", Types.TIMESTAMP },
			{ "reservedBy", Types.BIGINT },
			{ "claimCount", Types.DOUBLE },
			{ "dueDate", Types.TIMESTAMP },
			{ "checkOutBy", Types.BIGINT },
			{ "released", Types.BOOLEAN },
			{ "releaseDate", Types.TIMESTAMP },
			{ "releaseByUserId", Types.BIGINT },
			{ "vendorId", Types.BIGINT },
			{ "invoiceId", Types.BIGINT },
			{ "purchasePrice", Types.DOUBLE },
			{ "replacementPrice", Types.DOUBLE },
			{ "currencyId", Types.BIGINT },
			{ "localPurchasePrice", Types.DOUBLE },
			{ "publicNote", Types.VARCHAR },
			{ "privateNote", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "acquiredDate", Types.TIMESTAMP },
			{ "workflowStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_CatalogItem (catalogItemId LONG not null primary key,catalogId LONG,catalogTitle VARCHAR(75) null,callNumber VARCHAR(75) null,holdingLibraryId LONG,currentLibraryId LONG,barcode VARCHAR(75) null,copyNumber INTEGER,locationId LONG,itemCategoryId LONG,itemTypeId LONG,withdrawnStatus BOOLEAN,lostStatus BOOLEAN,damageStatus BOOLEAN,notForLoanStatus BOOLEAN,lastSeenDate DATE null,withdrawnDate DATE null,lostDate DATE null,lastCheckOutDate DATE null,circulationCount INTEGER,renewalCount INTEGER,reservedCount INTEGER,checkedOutDate DATE null,reservedBy LONG,claimCount DOUBLE,dueDate DATE null,checkOutBy LONG,released BOOLEAN,releaseDate DATE null,releaseByUserId LONG,vendorId LONG,invoiceId LONG,purchasePrice DOUBLE,replacementPrice DOUBLE,currencyId LONG,localPurchasePrice DOUBLE,publicNote TEXT null,privateNote TEXT null,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,acquiredDate DATE null,workflowStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_CatalogItem";
	public static final String ORDER_BY_JPQL = " ORDER BY catalogItem.catalogItemId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_CatalogItem.catalogItemId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.CatalogItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.CatalogItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.CatalogItem"),
			true);
	public static long BARCODE_COLUMN_BITMASK = 1L;
	public static long CATALOGID_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long HOLDINGLIBRARYID_COLUMN_BITMASK = 16L;
	public static long RELEASED_COLUMN_BITMASK = 32L;
	public static long WITHDRAWNSTATUS_COLUMN_BITMASK = 64L;
	public static long CATALOGITEMID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CatalogItem toModel(CatalogItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CatalogItem model = new CatalogItemImpl();

		model.setCatalogItemId(soapModel.getCatalogItemId());
		model.setCatalogId(soapModel.getCatalogId());
		model.setCatalogTitle(soapModel.getCatalogTitle());
		model.setCallNumber(soapModel.getCallNumber());
		model.setHoldingLibraryId(soapModel.getHoldingLibraryId());
		model.setCurrentLibraryId(soapModel.getCurrentLibraryId());
		model.setBarcode(soapModel.getBarcode());
		model.setCopyNumber(soapModel.getCopyNumber());
		model.setLocationId(soapModel.getLocationId());
		model.setItemCategoryId(soapModel.getItemCategoryId());
		model.setItemTypeId(soapModel.getItemTypeId());
		model.setWithdrawnStatus(soapModel.getWithdrawnStatus());
		model.setLostStatus(soapModel.getLostStatus());
		model.setDamageStatus(soapModel.getDamageStatus());
		model.setNotForLoanStatus(soapModel.getNotForLoanStatus());
		model.setLastSeenDate(soapModel.getLastSeenDate());
		model.setWithdrawnDate(soapModel.getWithdrawnDate());
		model.setLostDate(soapModel.getLostDate());
		model.setLastCheckOutDate(soapModel.getLastCheckOutDate());
		model.setCirculationCount(soapModel.getCirculationCount());
		model.setRenewalCount(soapModel.getRenewalCount());
		model.setReservedCount(soapModel.getReservedCount());
		model.setCheckedOutDate(soapModel.getCheckedOutDate());
		model.setReservedBy(soapModel.getReservedBy());
		model.setClaimCount(soapModel.getClaimCount());
		model.setDueDate(soapModel.getDueDate());
		model.setCheckOutBy(soapModel.getCheckOutBy());
		model.setReleased(soapModel.getReleased());
		model.setReleaseDate(soapModel.getReleaseDate());
		model.setReleaseByUserId(soapModel.getReleaseByUserId());
		model.setVendorId(soapModel.getVendorId());
		model.setInvoiceId(soapModel.getInvoiceId());
		model.setPurchasePrice(soapModel.getPurchasePrice());
		model.setReplacementPrice(soapModel.getReplacementPrice());
		model.setCurrencyId(soapModel.getCurrencyId());
		model.setLocalPurchasePrice(soapModel.getLocalPurchasePrice());
		model.setPublicNote(soapModel.getPublicNote());
		model.setPrivateNote(soapModel.getPrivateNote());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAcquiredDate(soapModel.getAcquiredDate());
		model.setWorkflowStatus(soapModel.getWorkflowStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CatalogItem> toModels(CatalogItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CatalogItem> models = new ArrayList<CatalogItem>(soapModels.length);

		for (CatalogItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.CatalogItem"));

	public CatalogItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catalogItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatalogItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catalogItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CatalogItem.class;
	}

	@Override
	public String getModelClassName() {
		return CatalogItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("catalogItemId", getCatalogItemId());
		attributes.put("catalogId", getCatalogId());
		attributes.put("catalogTitle", getCatalogTitle());
		attributes.put("callNumber", getCallNumber());
		attributes.put("holdingLibraryId", getHoldingLibraryId());
		attributes.put("currentLibraryId", getCurrentLibraryId());
		attributes.put("barcode", getBarcode());
		attributes.put("copyNumber", getCopyNumber());
		attributes.put("locationId", getLocationId());
		attributes.put("itemCategoryId", getItemCategoryId());
		attributes.put("itemTypeId", getItemTypeId());
		attributes.put("withdrawnStatus", getWithdrawnStatus());
		attributes.put("lostStatus", getLostStatus());
		attributes.put("damageStatus", getDamageStatus());
		attributes.put("notForLoanStatus", getNotForLoanStatus());
		attributes.put("lastSeenDate", getLastSeenDate());
		attributes.put("withdrawnDate", getWithdrawnDate());
		attributes.put("lostDate", getLostDate());
		attributes.put("lastCheckOutDate", getLastCheckOutDate());
		attributes.put("circulationCount", getCirculationCount());
		attributes.put("renewalCount", getRenewalCount());
		attributes.put("reservedCount", getReservedCount());
		attributes.put("checkedOutDate", getCheckedOutDate());
		attributes.put("reservedBy", getReservedBy());
		attributes.put("claimCount", getClaimCount());
		attributes.put("dueDate", getDueDate());
		attributes.put("checkOutBy", getCheckOutBy());
		attributes.put("released", getReleased());
		attributes.put("releaseDate", getReleaseDate());
		attributes.put("releaseByUserId", getReleaseByUserId());
		attributes.put("vendorId", getVendorId());
		attributes.put("invoiceId", getInvoiceId());
		attributes.put("purchasePrice", getPurchasePrice());
		attributes.put("replacementPrice", getReplacementPrice());
		attributes.put("currencyId", getCurrencyId());
		attributes.put("localPurchasePrice", getLocalPurchasePrice());
		attributes.put("publicNote", getPublicNote());
		attributes.put("privateNote", getPrivateNote());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("acquiredDate", getAcquiredDate());
		attributes.put("workflowStatus", getWorkflowStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long catalogItemId = (Long)attributes.get("catalogItemId");

		if (catalogItemId != null) {
			setCatalogItemId(catalogItemId);
		}

		Long catalogId = (Long)attributes.get("catalogId");

		if (catalogId != null) {
			setCatalogId(catalogId);
		}

		String catalogTitle = (String)attributes.get("catalogTitle");

		if (catalogTitle != null) {
			setCatalogTitle(catalogTitle);
		}

		String callNumber = (String)attributes.get("callNumber");

		if (callNumber != null) {
			setCallNumber(callNumber);
		}

		Long holdingLibraryId = (Long)attributes.get("holdingLibraryId");

		if (holdingLibraryId != null) {
			setHoldingLibraryId(holdingLibraryId);
		}

		Long currentLibraryId = (Long)attributes.get("currentLibraryId");

		if (currentLibraryId != null) {
			setCurrentLibraryId(currentLibraryId);
		}

		String barcode = (String)attributes.get("barcode");

		if (barcode != null) {
			setBarcode(barcode);
		}

		Integer copyNumber = (Integer)attributes.get("copyNumber");

		if (copyNumber != null) {
			setCopyNumber(copyNumber);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		Long itemCategoryId = (Long)attributes.get("itemCategoryId");

		if (itemCategoryId != null) {
			setItemCategoryId(itemCategoryId);
		}

		Long itemTypeId = (Long)attributes.get("itemTypeId");

		if (itemTypeId != null) {
			setItemTypeId(itemTypeId);
		}

		Boolean withdrawnStatus = (Boolean)attributes.get("withdrawnStatus");

		if (withdrawnStatus != null) {
			setWithdrawnStatus(withdrawnStatus);
		}

		Boolean lostStatus = (Boolean)attributes.get("lostStatus");

		if (lostStatus != null) {
			setLostStatus(lostStatus);
		}

		Boolean damageStatus = (Boolean)attributes.get("damageStatus");

		if (damageStatus != null) {
			setDamageStatus(damageStatus);
		}

		Boolean notForLoanStatus = (Boolean)attributes.get("notForLoanStatus");

		if (notForLoanStatus != null) {
			setNotForLoanStatus(notForLoanStatus);
		}

		Date lastSeenDate = (Date)attributes.get("lastSeenDate");

		if (lastSeenDate != null) {
			setLastSeenDate(lastSeenDate);
		}

		Date withdrawnDate = (Date)attributes.get("withdrawnDate");

		if (withdrawnDate != null) {
			setWithdrawnDate(withdrawnDate);
		}

		Date lostDate = (Date)attributes.get("lostDate");

		if (lostDate != null) {
			setLostDate(lostDate);
		}

		Date lastCheckOutDate = (Date)attributes.get("lastCheckOutDate");

		if (lastCheckOutDate != null) {
			setLastCheckOutDate(lastCheckOutDate);
		}

		Integer circulationCount = (Integer)attributes.get("circulationCount");

		if (circulationCount != null) {
			setCirculationCount(circulationCount);
		}

		Integer renewalCount = (Integer)attributes.get("renewalCount");

		if (renewalCount != null) {
			setRenewalCount(renewalCount);
		}

		Integer reservedCount = (Integer)attributes.get("reservedCount");

		if (reservedCount != null) {
			setReservedCount(reservedCount);
		}

		Date checkedOutDate = (Date)attributes.get("checkedOutDate");

		if (checkedOutDate != null) {
			setCheckedOutDate(checkedOutDate);
		}

		Long reservedBy = (Long)attributes.get("reservedBy");

		if (reservedBy != null) {
			setReservedBy(reservedBy);
		}

		Double claimCount = (Double)attributes.get("claimCount");

		if (claimCount != null) {
			setClaimCount(claimCount);
		}

		Date dueDate = (Date)attributes.get("dueDate");

		if (dueDate != null) {
			setDueDate(dueDate);
		}

		Long checkOutBy = (Long)attributes.get("checkOutBy");

		if (checkOutBy != null) {
			setCheckOutBy(checkOutBy);
		}

		Boolean released = (Boolean)attributes.get("released");

		if (released != null) {
			setReleased(released);
		}

		Date releaseDate = (Date)attributes.get("releaseDate");

		if (releaseDate != null) {
			setReleaseDate(releaseDate);
		}

		Long releaseByUserId = (Long)attributes.get("releaseByUserId");

		if (releaseByUserId != null) {
			setReleaseByUserId(releaseByUserId);
		}

		Long vendorId = (Long)attributes.get("vendorId");

		if (vendorId != null) {
			setVendorId(vendorId);
		}

		Long invoiceId = (Long)attributes.get("invoiceId");

		if (invoiceId != null) {
			setInvoiceId(invoiceId);
		}

		Double purchasePrice = (Double)attributes.get("purchasePrice");

		if (purchasePrice != null) {
			setPurchasePrice(purchasePrice);
		}

		Double replacementPrice = (Double)attributes.get("replacementPrice");

		if (replacementPrice != null) {
			setReplacementPrice(replacementPrice);
		}

		Long currencyId = (Long)attributes.get("currencyId");

		if (currencyId != null) {
			setCurrencyId(currencyId);
		}

		Double localPurchasePrice = (Double)attributes.get("localPurchasePrice");

		if (localPurchasePrice != null) {
			setLocalPurchasePrice(localPurchasePrice);
		}

		String publicNote = (String)attributes.get("publicNote");

		if (publicNote != null) {
			setPublicNote(publicNote);
		}

		String privateNote = (String)attributes.get("privateNote");

		if (privateNote != null) {
			setPrivateNote(privateNote);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date acquiredDate = (Date)attributes.get("acquiredDate");

		if (acquiredDate != null) {
			setAcquiredDate(acquiredDate);
		}

		Integer workflowStatus = (Integer)attributes.get("workflowStatus");

		if (workflowStatus != null) {
			setWorkflowStatus(workflowStatus);
		}
	}

	@JSON
	@Override
	public long getCatalogItemId() {
		return _catalogItemId;
	}

	@Override
	public void setCatalogItemId(long catalogItemId) {
		_catalogItemId = catalogItemId;
	}

	@JSON
	@Override
	public long getCatalogId() {
		return _catalogId;
	}

	@Override
	public void setCatalogId(long catalogId) {
		_columnBitmask |= CATALOGID_COLUMN_BITMASK;

		if (!_setOriginalCatalogId) {
			_setOriginalCatalogId = true;

			_originalCatalogId = _catalogId;
		}

		_catalogId = catalogId;
	}

	public long getOriginalCatalogId() {
		return _originalCatalogId;
	}

	@JSON
	@Override
	public String getCatalogTitle() {
		if (_catalogTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _catalogTitle;
		}
	}

	@Override
	public void setCatalogTitle(String catalogTitle) {
		_catalogTitle = catalogTitle;
	}

	@JSON
	@Override
	public String getCallNumber() {
		if (_callNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _callNumber;
		}
	}

	@Override
	public void setCallNumber(String callNumber) {
		_callNumber = callNumber;
	}

	@JSON
	@Override
	public long getHoldingLibraryId() {
		return _holdingLibraryId;
	}

	@Override
	public void setHoldingLibraryId(long holdingLibraryId) {
		_columnBitmask |= HOLDINGLIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalHoldingLibraryId) {
			_setOriginalHoldingLibraryId = true;

			_originalHoldingLibraryId = _holdingLibraryId;
		}

		_holdingLibraryId = holdingLibraryId;
	}

	public long getOriginalHoldingLibraryId() {
		return _originalHoldingLibraryId;
	}

	@JSON
	@Override
	public long getCurrentLibraryId() {
		return _currentLibraryId;
	}

	@Override
	public void setCurrentLibraryId(long currentLibraryId) {
		_currentLibraryId = currentLibraryId;
	}

	@JSON
	@Override
	public String getBarcode() {
		if (_barcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _barcode;
		}
	}

	@Override
	public void setBarcode(String barcode) {
		_columnBitmask |= BARCODE_COLUMN_BITMASK;

		if (_originalBarcode == null) {
			_originalBarcode = _barcode;
		}

		_barcode = barcode;
	}

	public String getOriginalBarcode() {
		return GetterUtil.getString(_originalBarcode);
	}

	@JSON
	@Override
	public int getCopyNumber() {
		return _copyNumber;
	}

	@Override
	public void setCopyNumber(int copyNumber) {
		_copyNumber = copyNumber;
	}

	@JSON
	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@JSON
	@Override
	public long getItemCategoryId() {
		return _itemCategoryId;
	}

	@Override
	public void setItemCategoryId(long itemCategoryId) {
		_itemCategoryId = itemCategoryId;
	}

	@JSON
	@Override
	public long getItemTypeId() {
		return _itemTypeId;
	}

	@Override
	public void setItemTypeId(long itemTypeId) {
		_itemTypeId = itemTypeId;
	}

	@JSON
	@Override
	public boolean getWithdrawnStatus() {
		return _withdrawnStatus;
	}

	@Override
	public boolean isWithdrawnStatus() {
		return _withdrawnStatus;
	}

	@Override
	public void setWithdrawnStatus(boolean withdrawnStatus) {
		_columnBitmask |= WITHDRAWNSTATUS_COLUMN_BITMASK;

		if (!_setOriginalWithdrawnStatus) {
			_setOriginalWithdrawnStatus = true;

			_originalWithdrawnStatus = _withdrawnStatus;
		}

		_withdrawnStatus = withdrawnStatus;
	}

	public boolean getOriginalWithdrawnStatus() {
		return _originalWithdrawnStatus;
	}

	@JSON
	@Override
	public boolean getLostStatus() {
		return _lostStatus;
	}

	@Override
	public boolean isLostStatus() {
		return _lostStatus;
	}

	@Override
	public void setLostStatus(boolean lostStatus) {
		_lostStatus = lostStatus;
	}

	@JSON
	@Override
	public boolean getDamageStatus() {
		return _damageStatus;
	}

	@Override
	public boolean isDamageStatus() {
		return _damageStatus;
	}

	@Override
	public void setDamageStatus(boolean damageStatus) {
		_damageStatus = damageStatus;
	}

	@JSON
	@Override
	public boolean getNotForLoanStatus() {
		return _notForLoanStatus;
	}

	@Override
	public boolean isNotForLoanStatus() {
		return _notForLoanStatus;
	}

	@Override
	public void setNotForLoanStatus(boolean notForLoanStatus) {
		_notForLoanStatus = notForLoanStatus;
	}

	@JSON
	@Override
	public Date getLastSeenDate() {
		return _lastSeenDate;
	}

	@Override
	public void setLastSeenDate(Date lastSeenDate) {
		_lastSeenDate = lastSeenDate;
	}

	@JSON
	@Override
	public Date getWithdrawnDate() {
		return _withdrawnDate;
	}

	@Override
	public void setWithdrawnDate(Date withdrawnDate) {
		_withdrawnDate = withdrawnDate;
	}

	@JSON
	@Override
	public Date getLostDate() {
		return _lostDate;
	}

	@Override
	public void setLostDate(Date lostDate) {
		_lostDate = lostDate;
	}

	@JSON
	@Override
	public Date getLastCheckOutDate() {
		return _lastCheckOutDate;
	}

	@Override
	public void setLastCheckOutDate(Date lastCheckOutDate) {
		_lastCheckOutDate = lastCheckOutDate;
	}

	@JSON
	@Override
	public int getCirculationCount() {
		return _circulationCount;
	}

	@Override
	public void setCirculationCount(int circulationCount) {
		_circulationCount = circulationCount;
	}

	@JSON
	@Override
	public int getRenewalCount() {
		return _renewalCount;
	}

	@Override
	public void setRenewalCount(int renewalCount) {
		_renewalCount = renewalCount;
	}

	@JSON
	@Override
	public int getReservedCount() {
		return _reservedCount;
	}

	@Override
	public void setReservedCount(int reservedCount) {
		_reservedCount = reservedCount;
	}

	@JSON
	@Override
	public Date getCheckedOutDate() {
		return _checkedOutDate;
	}

	@Override
	public void setCheckedOutDate(Date checkedOutDate) {
		_checkedOutDate = checkedOutDate;
	}

	@JSON
	@Override
	public long getReservedBy() {
		return _reservedBy;
	}

	@Override
	public void setReservedBy(long reservedBy) {
		_reservedBy = reservedBy;
	}

	@JSON
	@Override
	public Double getClaimCount() {
		return _claimCount;
	}

	@Override
	public void setClaimCount(Double claimCount) {
		_claimCount = claimCount;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@JSON
	@Override
	public long getCheckOutBy() {
		return _checkOutBy;
	}

	@Override
	public void setCheckOutBy(long checkOutBy) {
		_checkOutBy = checkOutBy;
	}

	@JSON
	@Override
	public boolean getReleased() {
		return _released;
	}

	@Override
	public boolean isReleased() {
		return _released;
	}

	@Override
	public void setReleased(boolean released) {
		_columnBitmask |= RELEASED_COLUMN_BITMASK;

		if (!_setOriginalReleased) {
			_setOriginalReleased = true;

			_originalReleased = _released;
		}

		_released = released;
	}

	public boolean getOriginalReleased() {
		return _originalReleased;
	}

	@JSON
	@Override
	public Date getReleaseDate() {
		return _releaseDate;
	}

	@Override
	public void setReleaseDate(Date releaseDate) {
		_releaseDate = releaseDate;
	}

	@JSON
	@Override
	public long getReleaseByUserId() {
		return _releaseByUserId;
	}

	@Override
	public void setReleaseByUserId(long releaseByUserId) {
		_releaseByUserId = releaseByUserId;
	}

	@Override
	public String getReleaseByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getReleaseByUserId(), "uuid",
			_releaseByUserUuid);
	}

	@Override
	public void setReleaseByUserUuid(String releaseByUserUuid) {
		_releaseByUserUuid = releaseByUserUuid;
	}

	@JSON
	@Override
	public long getVendorId() {
		return _vendorId;
	}

	@Override
	public void setVendorId(long vendorId) {
		_vendorId = vendorId;
	}

	@JSON
	@Override
	public long getInvoiceId() {
		return _invoiceId;
	}

	@Override
	public void setInvoiceId(long invoiceId) {
		_invoiceId = invoiceId;
	}

	@JSON
	@Override
	public double getPurchasePrice() {
		return _purchasePrice;
	}

	@Override
	public void setPurchasePrice(double purchasePrice) {
		_purchasePrice = purchasePrice;
	}

	@JSON
	@Override
	public double getReplacementPrice() {
		return _replacementPrice;
	}

	@Override
	public void setReplacementPrice(double replacementPrice) {
		_replacementPrice = replacementPrice;
	}

	@JSON
	@Override
	public long getCurrencyId() {
		return _currencyId;
	}

	@Override
	public void setCurrencyId(long currencyId) {
		_currencyId = currencyId;
	}

	@JSON
	@Override
	public double getLocalPurchasePrice() {
		return _localPurchasePrice;
	}

	@Override
	public void setLocalPurchasePrice(double localPurchasePrice) {
		_localPurchasePrice = localPurchasePrice;
	}

	@JSON
	@Override
	public String getPublicNote() {
		if (_publicNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _publicNote;
		}
	}

	@Override
	public void setPublicNote(String publicNote) {
		_publicNote = publicNote;
	}

	@JSON
	@Override
	public String getPrivateNote() {
		if (_privateNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _privateNote;
		}
	}

	@Override
	public void setPrivateNote(String privateNote) {
		_privateNote = privateNote;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getAcquiredDate() {
		return _acquiredDate;
	}

	@Override
	public void setAcquiredDate(Date acquiredDate) {
		_acquiredDate = acquiredDate;
	}

	@JSON
	@Override
	public int getWorkflowStatus() {
		return _workflowStatus;
	}

	@Override
	public void setWorkflowStatus(int workflowStatus) {
		_workflowStatus = workflowStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CatalogItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CatalogItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CatalogItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CatalogItemImpl catalogItemImpl = new CatalogItemImpl();

		catalogItemImpl.setCatalogItemId(getCatalogItemId());
		catalogItemImpl.setCatalogId(getCatalogId());
		catalogItemImpl.setCatalogTitle(getCatalogTitle());
		catalogItemImpl.setCallNumber(getCallNumber());
		catalogItemImpl.setHoldingLibraryId(getHoldingLibraryId());
		catalogItemImpl.setCurrentLibraryId(getCurrentLibraryId());
		catalogItemImpl.setBarcode(getBarcode());
		catalogItemImpl.setCopyNumber(getCopyNumber());
		catalogItemImpl.setLocationId(getLocationId());
		catalogItemImpl.setItemCategoryId(getItemCategoryId());
		catalogItemImpl.setItemTypeId(getItemTypeId());
		catalogItemImpl.setWithdrawnStatus(getWithdrawnStatus());
		catalogItemImpl.setLostStatus(getLostStatus());
		catalogItemImpl.setDamageStatus(getDamageStatus());
		catalogItemImpl.setNotForLoanStatus(getNotForLoanStatus());
		catalogItemImpl.setLastSeenDate(getLastSeenDate());
		catalogItemImpl.setWithdrawnDate(getWithdrawnDate());
		catalogItemImpl.setLostDate(getLostDate());
		catalogItemImpl.setLastCheckOutDate(getLastCheckOutDate());
		catalogItemImpl.setCirculationCount(getCirculationCount());
		catalogItemImpl.setRenewalCount(getRenewalCount());
		catalogItemImpl.setReservedCount(getReservedCount());
		catalogItemImpl.setCheckedOutDate(getCheckedOutDate());
		catalogItemImpl.setReservedBy(getReservedBy());
		catalogItemImpl.setClaimCount(getClaimCount());
		catalogItemImpl.setDueDate(getDueDate());
		catalogItemImpl.setCheckOutBy(getCheckOutBy());
		catalogItemImpl.setReleased(getReleased());
		catalogItemImpl.setReleaseDate(getReleaseDate());
		catalogItemImpl.setReleaseByUserId(getReleaseByUserId());
		catalogItemImpl.setVendorId(getVendorId());
		catalogItemImpl.setInvoiceId(getInvoiceId());
		catalogItemImpl.setPurchasePrice(getPurchasePrice());
		catalogItemImpl.setReplacementPrice(getReplacementPrice());
		catalogItemImpl.setCurrencyId(getCurrencyId());
		catalogItemImpl.setLocalPurchasePrice(getLocalPurchasePrice());
		catalogItemImpl.setPublicNote(getPublicNote());
		catalogItemImpl.setPrivateNote(getPrivateNote());
		catalogItemImpl.setCompanyId(getCompanyId());
		catalogItemImpl.setGroupId(getGroupId());
		catalogItemImpl.setUserId(getUserId());
		catalogItemImpl.setUserName(getUserName());
		catalogItemImpl.setCreateDate(getCreateDate());
		catalogItemImpl.setModifiedDate(getModifiedDate());
		catalogItemImpl.setAcquiredDate(getAcquiredDate());
		catalogItemImpl.setWorkflowStatus(getWorkflowStatus());

		catalogItemImpl.resetOriginalValues();

		return catalogItemImpl;
	}

	@Override
	public int compareTo(CatalogItem catalogItem) {
		long primaryKey = catalogItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CatalogItem)) {
			return false;
		}

		CatalogItem catalogItem = (CatalogItem)obj;

		long primaryKey = catalogItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CatalogItemModelImpl catalogItemModelImpl = this;

		catalogItemModelImpl._originalCatalogId = catalogItemModelImpl._catalogId;

		catalogItemModelImpl._setOriginalCatalogId = false;

		catalogItemModelImpl._originalHoldingLibraryId = catalogItemModelImpl._holdingLibraryId;

		catalogItemModelImpl._setOriginalHoldingLibraryId = false;

		catalogItemModelImpl._originalBarcode = catalogItemModelImpl._barcode;

		catalogItemModelImpl._originalWithdrawnStatus = catalogItemModelImpl._withdrawnStatus;

		catalogItemModelImpl._setOriginalWithdrawnStatus = false;

		catalogItemModelImpl._originalReleased = catalogItemModelImpl._released;

		catalogItemModelImpl._setOriginalReleased = false;

		catalogItemModelImpl._originalCompanyId = catalogItemModelImpl._companyId;

		catalogItemModelImpl._setOriginalCompanyId = false;

		catalogItemModelImpl._originalGroupId = catalogItemModelImpl._groupId;

		catalogItemModelImpl._setOriginalGroupId = false;

		catalogItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CatalogItem> toCacheModel() {
		CatalogItemCacheModel catalogItemCacheModel = new CatalogItemCacheModel();

		catalogItemCacheModel.catalogItemId = getCatalogItemId();

		catalogItemCacheModel.catalogId = getCatalogId();

		catalogItemCacheModel.catalogTitle = getCatalogTitle();

		String catalogTitle = catalogItemCacheModel.catalogTitle;

		if ((catalogTitle != null) && (catalogTitle.length() == 0)) {
			catalogItemCacheModel.catalogTitle = null;
		}

		catalogItemCacheModel.callNumber = getCallNumber();

		String callNumber = catalogItemCacheModel.callNumber;

		if ((callNumber != null) && (callNumber.length() == 0)) {
			catalogItemCacheModel.callNumber = null;
		}

		catalogItemCacheModel.holdingLibraryId = getHoldingLibraryId();

		catalogItemCacheModel.currentLibraryId = getCurrentLibraryId();

		catalogItemCacheModel.barcode = getBarcode();

		String barcode = catalogItemCacheModel.barcode;

		if ((barcode != null) && (barcode.length() == 0)) {
			catalogItemCacheModel.barcode = null;
		}

		catalogItemCacheModel.copyNumber = getCopyNumber();

		catalogItemCacheModel.locationId = getLocationId();

		catalogItemCacheModel.itemCategoryId = getItemCategoryId();

		catalogItemCacheModel.itemTypeId = getItemTypeId();

		catalogItemCacheModel.withdrawnStatus = getWithdrawnStatus();

		catalogItemCacheModel.lostStatus = getLostStatus();

		catalogItemCacheModel.damageStatus = getDamageStatus();

		catalogItemCacheModel.notForLoanStatus = getNotForLoanStatus();

		Date lastSeenDate = getLastSeenDate();

		if (lastSeenDate != null) {
			catalogItemCacheModel.lastSeenDate = lastSeenDate.getTime();
		}
		else {
			catalogItemCacheModel.lastSeenDate = Long.MIN_VALUE;
		}

		Date withdrawnDate = getWithdrawnDate();

		if (withdrawnDate != null) {
			catalogItemCacheModel.withdrawnDate = withdrawnDate.getTime();
		}
		else {
			catalogItemCacheModel.withdrawnDate = Long.MIN_VALUE;
		}

		Date lostDate = getLostDate();

		if (lostDate != null) {
			catalogItemCacheModel.lostDate = lostDate.getTime();
		}
		else {
			catalogItemCacheModel.lostDate = Long.MIN_VALUE;
		}

		Date lastCheckOutDate = getLastCheckOutDate();

		if (lastCheckOutDate != null) {
			catalogItemCacheModel.lastCheckOutDate = lastCheckOutDate.getTime();
		}
		else {
			catalogItemCacheModel.lastCheckOutDate = Long.MIN_VALUE;
		}

		catalogItemCacheModel.circulationCount = getCirculationCount();

		catalogItemCacheModel.renewalCount = getRenewalCount();

		catalogItemCacheModel.reservedCount = getReservedCount();

		Date checkedOutDate = getCheckedOutDate();

		if (checkedOutDate != null) {
			catalogItemCacheModel.checkedOutDate = checkedOutDate.getTime();
		}
		else {
			catalogItemCacheModel.checkedOutDate = Long.MIN_VALUE;
		}

		catalogItemCacheModel.reservedBy = getReservedBy();

		catalogItemCacheModel.claimCount = getClaimCount();

		Date dueDate = getDueDate();

		if (dueDate != null) {
			catalogItemCacheModel.dueDate = dueDate.getTime();
		}
		else {
			catalogItemCacheModel.dueDate = Long.MIN_VALUE;
		}

		catalogItemCacheModel.checkOutBy = getCheckOutBy();

		catalogItemCacheModel.released = getReleased();

		Date releaseDate = getReleaseDate();

		if (releaseDate != null) {
			catalogItemCacheModel.releaseDate = releaseDate.getTime();
		}
		else {
			catalogItemCacheModel.releaseDate = Long.MIN_VALUE;
		}

		catalogItemCacheModel.releaseByUserId = getReleaseByUserId();

		catalogItemCacheModel.vendorId = getVendorId();

		catalogItemCacheModel.invoiceId = getInvoiceId();

		catalogItemCacheModel.purchasePrice = getPurchasePrice();

		catalogItemCacheModel.replacementPrice = getReplacementPrice();

		catalogItemCacheModel.currencyId = getCurrencyId();

		catalogItemCacheModel.localPurchasePrice = getLocalPurchasePrice();

		catalogItemCacheModel.publicNote = getPublicNote();

		String publicNote = catalogItemCacheModel.publicNote;

		if ((publicNote != null) && (publicNote.length() == 0)) {
			catalogItemCacheModel.publicNote = null;
		}

		catalogItemCacheModel.privateNote = getPrivateNote();

		String privateNote = catalogItemCacheModel.privateNote;

		if ((privateNote != null) && (privateNote.length() == 0)) {
			catalogItemCacheModel.privateNote = null;
		}

		catalogItemCacheModel.companyId = getCompanyId();

		catalogItemCacheModel.groupId = getGroupId();

		catalogItemCacheModel.userId = getUserId();

		catalogItemCacheModel.userName = getUserName();

		String userName = catalogItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			catalogItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			catalogItemCacheModel.createDate = createDate.getTime();
		}
		else {
			catalogItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			catalogItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			catalogItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date acquiredDate = getAcquiredDate();

		if (acquiredDate != null) {
			catalogItemCacheModel.acquiredDate = acquiredDate.getTime();
		}
		else {
			catalogItemCacheModel.acquiredDate = Long.MIN_VALUE;
		}

		catalogItemCacheModel.workflowStatus = getWorkflowStatus();

		return catalogItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(93);

		sb.append("{catalogItemId=");
		sb.append(getCatalogItemId());
		sb.append(", catalogId=");
		sb.append(getCatalogId());
		sb.append(", catalogTitle=");
		sb.append(getCatalogTitle());
		sb.append(", callNumber=");
		sb.append(getCallNumber());
		sb.append(", holdingLibraryId=");
		sb.append(getHoldingLibraryId());
		sb.append(", currentLibraryId=");
		sb.append(getCurrentLibraryId());
		sb.append(", barcode=");
		sb.append(getBarcode());
		sb.append(", copyNumber=");
		sb.append(getCopyNumber());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", itemCategoryId=");
		sb.append(getItemCategoryId());
		sb.append(", itemTypeId=");
		sb.append(getItemTypeId());
		sb.append(", withdrawnStatus=");
		sb.append(getWithdrawnStatus());
		sb.append(", lostStatus=");
		sb.append(getLostStatus());
		sb.append(", damageStatus=");
		sb.append(getDamageStatus());
		sb.append(", notForLoanStatus=");
		sb.append(getNotForLoanStatus());
		sb.append(", lastSeenDate=");
		sb.append(getLastSeenDate());
		sb.append(", withdrawnDate=");
		sb.append(getWithdrawnDate());
		sb.append(", lostDate=");
		sb.append(getLostDate());
		sb.append(", lastCheckOutDate=");
		sb.append(getLastCheckOutDate());
		sb.append(", circulationCount=");
		sb.append(getCirculationCount());
		sb.append(", renewalCount=");
		sb.append(getRenewalCount());
		sb.append(", reservedCount=");
		sb.append(getReservedCount());
		sb.append(", checkedOutDate=");
		sb.append(getCheckedOutDate());
		sb.append(", reservedBy=");
		sb.append(getReservedBy());
		sb.append(", claimCount=");
		sb.append(getClaimCount());
		sb.append(", dueDate=");
		sb.append(getDueDate());
		sb.append(", checkOutBy=");
		sb.append(getCheckOutBy());
		sb.append(", released=");
		sb.append(getReleased());
		sb.append(", releaseDate=");
		sb.append(getReleaseDate());
		sb.append(", releaseByUserId=");
		sb.append(getReleaseByUserId());
		sb.append(", vendorId=");
		sb.append(getVendorId());
		sb.append(", invoiceId=");
		sb.append(getInvoiceId());
		sb.append(", purchasePrice=");
		sb.append(getPurchasePrice());
		sb.append(", replacementPrice=");
		sb.append(getReplacementPrice());
		sb.append(", currencyId=");
		sb.append(getCurrencyId());
		sb.append(", localPurchasePrice=");
		sb.append(getLocalPurchasePrice());
		sb.append(", publicNote=");
		sb.append(getPublicNote());
		sb.append(", privateNote=");
		sb.append(getPrivateNote());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", acquiredDate=");
		sb.append(getAcquiredDate());
		sb.append(", workflowStatus=");
		sb.append(getWorkflowStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(142);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.CatalogItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>catalogItemId</column-name><column-value><![CDATA[");
		sb.append(getCatalogItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catalogId</column-name><column-value><![CDATA[");
		sb.append(getCatalogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catalogTitle</column-name><column-value><![CDATA[");
		sb.append(getCatalogTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callNumber</column-name><column-value><![CDATA[");
		sb.append(getCallNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>holdingLibraryId</column-name><column-value><![CDATA[");
		sb.append(getHoldingLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentLibraryId</column-name><column-value><![CDATA[");
		sb.append(getCurrentLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>barcode</column-name><column-value><![CDATA[");
		sb.append(getBarcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copyNumber</column-name><column-value><![CDATA[");
		sb.append(getCopyNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCategoryId</column-name><column-value><![CDATA[");
		sb.append(getItemCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
		sb.append(getItemTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>withdrawnStatus</column-name><column-value><![CDATA[");
		sb.append(getWithdrawnStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lostStatus</column-name><column-value><![CDATA[");
		sb.append(getLostStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>damageStatus</column-name><column-value><![CDATA[");
		sb.append(getDamageStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notForLoanStatus</column-name><column-value><![CDATA[");
		sb.append(getNotForLoanStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastSeenDate</column-name><column-value><![CDATA[");
		sb.append(getLastSeenDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>withdrawnDate</column-name><column-value><![CDATA[");
		sb.append(getWithdrawnDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lostDate</column-name><column-value><![CDATA[");
		sb.append(getLostDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastCheckOutDate</column-name><column-value><![CDATA[");
		sb.append(getLastCheckOutDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circulationCount</column-name><column-value><![CDATA[");
		sb.append(getCirculationCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>renewalCount</column-name><column-value><![CDATA[");
		sb.append(getRenewalCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reservedCount</column-name><column-value><![CDATA[");
		sb.append(getReservedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkedOutDate</column-name><column-value><![CDATA[");
		sb.append(getCheckedOutDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reservedBy</column-name><column-value><![CDATA[");
		sb.append(getReservedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>claimCount</column-name><column-value><![CDATA[");
		sb.append(getClaimCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dueDate</column-name><column-value><![CDATA[");
		sb.append(getDueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkOutBy</column-name><column-value><![CDATA[");
		sb.append(getCheckOutBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>released</column-name><column-value><![CDATA[");
		sb.append(getReleased());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseDate</column-name><column-value><![CDATA[");
		sb.append(getReleaseDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseByUserId</column-name><column-value><![CDATA[");
		sb.append(getReleaseByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vendorId</column-name><column-value><![CDATA[");
		sb.append(getVendorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceId</column-name><column-value><![CDATA[");
		sb.append(getInvoiceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchasePrice</column-name><column-value><![CDATA[");
		sb.append(getPurchasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacementPrice</column-name><column-value><![CDATA[");
		sb.append(getReplacementPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyId</column-name><column-value><![CDATA[");
		sb.append(getCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localPurchasePrice</column-name><column-value><![CDATA[");
		sb.append(getLocalPurchasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicNote</column-name><column-value><![CDATA[");
		sb.append(getPublicNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>privateNote</column-name><column-value><![CDATA[");
		sb.append(getPrivateNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acquiredDate</column-name><column-value><![CDATA[");
		sb.append(getAcquiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowStatus</column-name><column-value><![CDATA[");
		sb.append(getWorkflowStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CatalogItem.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CatalogItem.class
		};
	private long _catalogItemId;
	private long _catalogId;
	private long _originalCatalogId;
	private boolean _setOriginalCatalogId;
	private String _catalogTitle;
	private String _callNumber;
	private long _holdingLibraryId;
	private long _originalHoldingLibraryId;
	private boolean _setOriginalHoldingLibraryId;
	private long _currentLibraryId;
	private String _barcode;
	private String _originalBarcode;
	private int _copyNumber;
	private long _locationId;
	private long _itemCategoryId;
	private long _itemTypeId;
	private boolean _withdrawnStatus;
	private boolean _originalWithdrawnStatus;
	private boolean _setOriginalWithdrawnStatus;
	private boolean _lostStatus;
	private boolean _damageStatus;
	private boolean _notForLoanStatus;
	private Date _lastSeenDate;
	private Date _withdrawnDate;
	private Date _lostDate;
	private Date _lastCheckOutDate;
	private int _circulationCount;
	private int _renewalCount;
	private int _reservedCount;
	private Date _checkedOutDate;
	private long _reservedBy;
	private Double _claimCount;
	private Date _dueDate;
	private long _checkOutBy;
	private boolean _released;
	private boolean _originalReleased;
	private boolean _setOriginalReleased;
	private Date _releaseDate;
	private long _releaseByUserId;
	private String _releaseByUserUuid;
	private long _vendorId;
	private long _invoiceId;
	private double _purchasePrice;
	private double _replacementPrice;
	private long _currencyId;
	private double _localPurchasePrice;
	private String _publicNote;
	private String _privateNote;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _acquiredDate;
	private int _workflowStatus;
	private long _columnBitmask;
	private CatalogItem _escapedModel;
}