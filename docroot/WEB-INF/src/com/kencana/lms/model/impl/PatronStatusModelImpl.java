/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.PatronStatus;
import com.kencana.lms.model.PatronStatusModel;
import com.kencana.lms.model.PatronStatusSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PatronStatus service. Represents a row in the &quot;Kencana_PatronStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.PatronStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatronStatusImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see PatronStatusImpl
 * @see com.kencana.lms.model.PatronStatus
 * @see com.kencana.lms.model.PatronStatusModel
 * @generated
 */
@JSON(strict = true)
public class PatronStatusModelImpl extends BaseModelImpl<PatronStatus>
	implements PatronStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patron status model instance should use the {@link com.kencana.lms.model.PatronStatus} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_PatronStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patronStatusId", Types.BIGINT },
			{ "patronStatusName", Types.VARCHAR },
			{ "noLogin", Types.BOOLEAN },
			{ "noCheckout", Types.BOOLEAN },
			{ "noReserve", Types.BOOLEAN },
			{ "noRenew", Types.BOOLEAN },
			{ "color", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_PatronStatus (patronStatusId LONG not null primary key,patronStatusName VARCHAR(75) null,noLogin BOOLEAN,noCheckout BOOLEAN,noReserve BOOLEAN,noRenew BOOLEAN,color INTEGER,groupId LONG,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_PatronStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY patronStatus.patronStatusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_PatronStatus.patronStatusId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.PatronStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.PatronStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.PatronStatus"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PATRONSTATUSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PatronStatus toModel(PatronStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PatronStatus model = new PatronStatusImpl();

		model.setPatronStatusId(soapModel.getPatronStatusId());
		model.setPatronStatusName(soapModel.getPatronStatusName());
		model.setNoLogin(soapModel.getNoLogin());
		model.setNoCheckout(soapModel.getNoCheckout());
		model.setNoReserve(soapModel.getNoReserve());
		model.setNoRenew(soapModel.getNoRenew());
		model.setColor(soapModel.getColor());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PatronStatus> toModels(PatronStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PatronStatus> models = new ArrayList<PatronStatus>(soapModels.length);

		for (PatronStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.PatronStatus"));

	public PatronStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patronStatusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatronStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patronStatusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PatronStatus.class;
	}

	@Override
	public String getModelClassName() {
		return PatronStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patronStatusId", getPatronStatusId());
		attributes.put("patronStatusName", getPatronStatusName());
		attributes.put("noLogin", getNoLogin());
		attributes.put("noCheckout", getNoCheckout());
		attributes.put("noReserve", getNoReserve());
		attributes.put("noRenew", getNoRenew());
		attributes.put("color", getColor());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patronStatusId = (Long)attributes.get("patronStatusId");

		if (patronStatusId != null) {
			setPatronStatusId(patronStatusId);
		}

		String patronStatusName = (String)attributes.get("patronStatusName");

		if (patronStatusName != null) {
			setPatronStatusName(patronStatusName);
		}

		Boolean noLogin = (Boolean)attributes.get("noLogin");

		if (noLogin != null) {
			setNoLogin(noLogin);
		}

		Boolean noCheckout = (Boolean)attributes.get("noCheckout");

		if (noCheckout != null) {
			setNoCheckout(noCheckout);
		}

		Boolean noReserve = (Boolean)attributes.get("noReserve");

		if (noReserve != null) {
			setNoReserve(noReserve);
		}

		Boolean noRenew = (Boolean)attributes.get("noRenew");

		if (noRenew != null) {
			setNoRenew(noRenew);
		}

		Integer color = (Integer)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@JSON
	@Override
	public long getPatronStatusId() {
		return _patronStatusId;
	}

	@Override
	public void setPatronStatusId(long patronStatusId) {
		_patronStatusId = patronStatusId;
	}

	@JSON
	@Override
	public String getPatronStatusName() {
		if (_patronStatusName == null) {
			return StringPool.BLANK;
		}
		else {
			return _patronStatusName;
		}
	}

	@Override
	public void setPatronStatusName(String patronStatusName) {
		_patronStatusName = patronStatusName;
	}

	@JSON
	@Override
	public boolean getNoLogin() {
		return _noLogin;
	}

	@Override
	public boolean isNoLogin() {
		return _noLogin;
	}

	@Override
	public void setNoLogin(boolean noLogin) {
		_noLogin = noLogin;
	}

	@JSON
	@Override
	public boolean getNoCheckout() {
		return _noCheckout;
	}

	@Override
	public boolean isNoCheckout() {
		return _noCheckout;
	}

	@Override
	public void setNoCheckout(boolean noCheckout) {
		_noCheckout = noCheckout;
	}

	@JSON
	@Override
	public boolean getNoReserve() {
		return _noReserve;
	}

	@Override
	public boolean isNoReserve() {
		return _noReserve;
	}

	@Override
	public void setNoReserve(boolean noReserve) {
		_noReserve = noReserve;
	}

	@JSON
	@Override
	public boolean getNoRenew() {
		return _noRenew;
	}

	@Override
	public boolean isNoRenew() {
		return _noRenew;
	}

	@Override
	public void setNoRenew(boolean noRenew) {
		_noRenew = noRenew;
	}

	@JSON
	@Override
	public int getColor() {
		return _color;
	}

	@Override
	public void setColor(int color) {
		_color = color;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PatronStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PatronStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PatronStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatronStatusImpl patronStatusImpl = new PatronStatusImpl();

		patronStatusImpl.setPatronStatusId(getPatronStatusId());
		patronStatusImpl.setPatronStatusName(getPatronStatusName());
		patronStatusImpl.setNoLogin(getNoLogin());
		patronStatusImpl.setNoCheckout(getNoCheckout());
		patronStatusImpl.setNoReserve(getNoReserve());
		patronStatusImpl.setNoRenew(getNoRenew());
		patronStatusImpl.setColor(getColor());
		patronStatusImpl.setGroupId(getGroupId());
		patronStatusImpl.setCompanyId(getCompanyId());

		patronStatusImpl.resetOriginalValues();

		return patronStatusImpl;
	}

	@Override
	public int compareTo(PatronStatus patronStatus) {
		long primaryKey = patronStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PatronStatus)) {
			return false;
		}

		PatronStatus patronStatus = (PatronStatus)obj;

		long primaryKey = patronStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PatronStatusModelImpl patronStatusModelImpl = this;

		patronStatusModelImpl._originalGroupId = patronStatusModelImpl._groupId;

		patronStatusModelImpl._setOriginalGroupId = false;

		patronStatusModelImpl._originalCompanyId = patronStatusModelImpl._companyId;

		patronStatusModelImpl._setOriginalCompanyId = false;

		patronStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PatronStatus> toCacheModel() {
		PatronStatusCacheModel patronStatusCacheModel = new PatronStatusCacheModel();

		patronStatusCacheModel.patronStatusId = getPatronStatusId();

		patronStatusCacheModel.patronStatusName = getPatronStatusName();

		String patronStatusName = patronStatusCacheModel.patronStatusName;

		if ((patronStatusName != null) && (patronStatusName.length() == 0)) {
			patronStatusCacheModel.patronStatusName = null;
		}

		patronStatusCacheModel.noLogin = getNoLogin();

		patronStatusCacheModel.noCheckout = getNoCheckout();

		patronStatusCacheModel.noReserve = getNoReserve();

		patronStatusCacheModel.noRenew = getNoRenew();

		patronStatusCacheModel.color = getColor();

		patronStatusCacheModel.groupId = getGroupId();

		patronStatusCacheModel.companyId = getCompanyId();

		return patronStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{patronStatusId=");
		sb.append(getPatronStatusId());
		sb.append(", patronStatusName=");
		sb.append(getPatronStatusName());
		sb.append(", noLogin=");
		sb.append(getNoLogin());
		sb.append(", noCheckout=");
		sb.append(getNoCheckout());
		sb.append(", noReserve=");
		sb.append(getNoReserve());
		sb.append(", noRenew=");
		sb.append(getNoRenew());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.PatronStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patronStatusId</column-name><column-value><![CDATA[");
		sb.append(getPatronStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronStatusName</column-name><column-value><![CDATA[");
		sb.append(getPatronStatusName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noLogin</column-name><column-value><![CDATA[");
		sb.append(getNoLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noCheckout</column-name><column-value><![CDATA[");
		sb.append(getNoCheckout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noReserve</column-name><column-value><![CDATA[");
		sb.append(getNoReserve());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noRenew</column-name><column-value><![CDATA[");
		sb.append(getNoRenew());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PatronStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PatronStatus.class
		};
	private long _patronStatusId;
	private String _patronStatusName;
	private boolean _noLogin;
	private boolean _noCheckout;
	private boolean _noReserve;
	private boolean _noRenew;
	private int _color;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private PatronStatus _escapedModel;
}