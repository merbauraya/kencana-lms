/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.Patron;
import com.kencana.lms.model.PatronModel;
import com.kencana.lms.model.PatronSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Patron service. Represents a row in the &quot;Kencana_Patron&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.PatronModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatronImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see PatronImpl
 * @see com.kencana.lms.model.Patron
 * @see com.kencana.lms.model.PatronModel
 * @generated
 */
@JSON(strict = true)
public class PatronModelImpl extends BaseModelImpl<Patron>
	implements PatronModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patron model instance should use the {@link com.kencana.lms.model.Patron} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_Patron";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patronId", Types.BIGINT },
			{ "cardNumber", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "expiryDate", Types.TIMESTAMP },
			{ "patronCategoryId", Types.BIGINT },
			{ "patronStatusId", Types.BIGINT },
			{ "patronNote", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_Patron (patronId LONG not null primary key,cardNumber VARCHAR(75) null,userId LONG,groupId LONG,companyId LONG,libraryId LONG,expiryDate DATE null,patronCategoryId LONG,patronStatusId LONG,patronNote STRING null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_Patron";
	public static final String ORDER_BY_JPQL = " ORDER BY patron.patronId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_Patron.patronId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.Patron"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.Patron"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.Patron"),
			true);
	public static long CARDNUMBER_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long LIBRARYID_COLUMN_BITMASK = 8L;
	public static long PATRONCATEGORYID_COLUMN_BITMASK = 16L;
	public static long PATRONSTATUSID_COLUMN_BITMASK = 32L;
	public static long USERID_COLUMN_BITMASK = 64L;
	public static long PATRONID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Patron toModel(PatronSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Patron model = new PatronImpl();

		model.setPatronId(soapModel.getPatronId());
		model.setCardNumber(soapModel.getCardNumber());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setExpiryDate(soapModel.getExpiryDate());
		model.setPatronCategoryId(soapModel.getPatronCategoryId());
		model.setPatronStatusId(soapModel.getPatronStatusId());
		model.setPatronNote(soapModel.getPatronNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Patron> toModels(PatronSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Patron> models = new ArrayList<Patron>(soapModels.length);

		for (PatronSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.Patron"));

	public PatronModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patronId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatronId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patronId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Patron.class;
	}

	@Override
	public String getModelClassName() {
		return Patron.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patronId", getPatronId());
		attributes.put("cardNumber", getCardNumber());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("expiryDate", getExpiryDate());
		attributes.put("patronCategoryId", getPatronCategoryId());
		attributes.put("patronStatusId", getPatronStatusId());
		attributes.put("patronNote", getPatronNote());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patronId = (Long)attributes.get("patronId");

		if (patronId != null) {
			setPatronId(patronId);
		}

		String cardNumber = (String)attributes.get("cardNumber");

		if (cardNumber != null) {
			setCardNumber(cardNumber);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Date expiryDate = (Date)attributes.get("expiryDate");

		if (expiryDate != null) {
			setExpiryDate(expiryDate);
		}

		Long patronCategoryId = (Long)attributes.get("patronCategoryId");

		if (patronCategoryId != null) {
			setPatronCategoryId(patronCategoryId);
		}

		Long patronStatusId = (Long)attributes.get("patronStatusId");

		if (patronStatusId != null) {
			setPatronStatusId(patronStatusId);
		}

		String patronNote = (String)attributes.get("patronNote");

		if (patronNote != null) {
			setPatronNote(patronNote);
		}
	}

	@JSON
	@Override
	public long getPatronId() {
		return _patronId;
	}

	@Override
	public void setPatronId(long patronId) {
		_patronId = patronId;
	}

	@JSON
	@Override
	public String getCardNumber() {
		if (_cardNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _cardNumber;
		}
	}

	@Override
	public void setCardNumber(String cardNumber) {
		_columnBitmask |= CARDNUMBER_COLUMN_BITMASK;

		if (_originalCardNumber == null) {
			_originalCardNumber = _cardNumber;
		}

		_cardNumber = cardNumber;
	}

	public String getOriginalCardNumber() {
		return GetterUtil.getString(_originalCardNumber);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		_expiryDate = expiryDate;
	}

	@JSON
	@Override
	public long getPatronCategoryId() {
		return _patronCategoryId;
	}

	@Override
	public void setPatronCategoryId(long patronCategoryId) {
		_columnBitmask |= PATRONCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalPatronCategoryId) {
			_setOriginalPatronCategoryId = true;

			_originalPatronCategoryId = _patronCategoryId;
		}

		_patronCategoryId = patronCategoryId;
	}

	public long getOriginalPatronCategoryId() {
		return _originalPatronCategoryId;
	}

	@JSON
	@Override
	public long getPatronStatusId() {
		return _patronStatusId;
	}

	@Override
	public void setPatronStatusId(long patronStatusId) {
		_columnBitmask |= PATRONSTATUSID_COLUMN_BITMASK;

		if (!_setOriginalPatronStatusId) {
			_setOriginalPatronStatusId = true;

			_originalPatronStatusId = _patronStatusId;
		}

		_patronStatusId = patronStatusId;
	}

	public long getOriginalPatronStatusId() {
		return _originalPatronStatusId;
	}

	@JSON
	@Override
	public String getPatronNote() {
		if (_patronNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _patronNote;
		}
	}

	@Override
	public void setPatronNote(String patronNote) {
		_patronNote = patronNote;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Patron.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Patron toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Patron)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatronImpl patronImpl = new PatronImpl();

		patronImpl.setPatronId(getPatronId());
		patronImpl.setCardNumber(getCardNumber());
		patronImpl.setUserId(getUserId());
		patronImpl.setGroupId(getGroupId());
		patronImpl.setCompanyId(getCompanyId());
		patronImpl.setLibraryId(getLibraryId());
		patronImpl.setExpiryDate(getExpiryDate());
		patronImpl.setPatronCategoryId(getPatronCategoryId());
		patronImpl.setPatronStatusId(getPatronStatusId());
		patronImpl.setPatronNote(getPatronNote());

		patronImpl.resetOriginalValues();

		return patronImpl;
	}

	@Override
	public int compareTo(Patron patron) {
		long primaryKey = patron.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Patron)) {
			return false;
		}

		Patron patron = (Patron)obj;

		long primaryKey = patron.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PatronModelImpl patronModelImpl = this;

		patronModelImpl._originalCardNumber = patronModelImpl._cardNumber;

		patronModelImpl._originalUserId = patronModelImpl._userId;

		patronModelImpl._setOriginalUserId = false;

		patronModelImpl._originalGroupId = patronModelImpl._groupId;

		patronModelImpl._setOriginalGroupId = false;

		patronModelImpl._originalCompanyId = patronModelImpl._companyId;

		patronModelImpl._setOriginalCompanyId = false;

		patronModelImpl._originalLibraryId = patronModelImpl._libraryId;

		patronModelImpl._setOriginalLibraryId = false;

		patronModelImpl._originalPatronCategoryId = patronModelImpl._patronCategoryId;

		patronModelImpl._setOriginalPatronCategoryId = false;

		patronModelImpl._originalPatronStatusId = patronModelImpl._patronStatusId;

		patronModelImpl._setOriginalPatronStatusId = false;

		patronModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Patron> toCacheModel() {
		PatronCacheModel patronCacheModel = new PatronCacheModel();

		patronCacheModel.patronId = getPatronId();

		patronCacheModel.cardNumber = getCardNumber();

		String cardNumber = patronCacheModel.cardNumber;

		if ((cardNumber != null) && (cardNumber.length() == 0)) {
			patronCacheModel.cardNumber = null;
		}

		patronCacheModel.userId = getUserId();

		patronCacheModel.groupId = getGroupId();

		patronCacheModel.companyId = getCompanyId();

		patronCacheModel.libraryId = getLibraryId();

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			patronCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			patronCacheModel.expiryDate = Long.MIN_VALUE;
		}

		patronCacheModel.patronCategoryId = getPatronCategoryId();

		patronCacheModel.patronStatusId = getPatronStatusId();

		patronCacheModel.patronNote = getPatronNote();

		String patronNote = patronCacheModel.patronNote;

		if ((patronNote != null) && (patronNote.length() == 0)) {
			patronCacheModel.patronNote = null;
		}

		return patronCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{patronId=");
		sb.append(getPatronId());
		sb.append(", cardNumber=");
		sb.append(getCardNumber());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", expiryDate=");
		sb.append(getExpiryDate());
		sb.append(", patronCategoryId=");
		sb.append(getPatronCategoryId());
		sb.append(", patronStatusId=");
		sb.append(getPatronStatusId());
		sb.append(", patronNote=");
		sb.append(getPatronNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.Patron");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patronId</column-name><column-value><![CDATA[");
		sb.append(getPatronId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cardNumber</column-name><column-value><![CDATA[");
		sb.append(getCardNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiryDate</column-name><column-value><![CDATA[");
		sb.append(getExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronCategoryId</column-name><column-value><![CDATA[");
		sb.append(getPatronCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronStatusId</column-name><column-value><![CDATA[");
		sb.append(getPatronStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronNote</column-name><column-value><![CDATA[");
		sb.append(getPatronNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Patron.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Patron.class };
	private long _patronId;
	private String _cardNumber;
	private String _originalCardNumber;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private Date _expiryDate;
	private long _patronCategoryId;
	private long _originalPatronCategoryId;
	private boolean _setOriginalPatronCategoryId;
	private long _patronStatusId;
	private long _originalPatronStatusId;
	private boolean _setOriginalPatronStatusId;
	private String _patronNote;
	private long _columnBitmask;
	private Patron _escapedModel;
}