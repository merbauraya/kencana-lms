/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.ItemCategory;
import com.kencana.lms.model.ItemCategoryModel;
import com.kencana.lms.model.ItemCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ItemCategory service. Represents a row in the &quot;Kencana_ItemCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.ItemCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemCategoryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ItemCategoryImpl
 * @see com.kencana.lms.model.ItemCategory
 * @see com.kencana.lms.model.ItemCategoryModel
 * @generated
 */
@JSON(strict = true)
public class ItemCategoryModelImpl extends BaseModelImpl<ItemCategory>
	implements ItemCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item category model instance should use the {@link com.kencana.lms.model.ItemCategory} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_ItemCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemCategoryId", Types.BIGINT },
			{ "itemCategoryName", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_ItemCategory (itemCategoryId LONG not null primary key,itemCategoryName VARCHAR(75) null,groupId LONG,companyId LONG,createDate DATE null,userId LONG,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_ItemCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY itemCategory.itemCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_ItemCategory.itemCategoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.ItemCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.ItemCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.ItemCategory"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ITEMCATEGORYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemCategory toModel(ItemCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemCategory model = new ItemCategoryImpl();

		model.setItemCategoryId(soapModel.getItemCategoryId());
		model.setItemCategoryName(soapModel.getItemCategoryName());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setUserId(soapModel.getUserId());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemCategory> toModels(ItemCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ItemCategory> models = new ArrayList<ItemCategory>(soapModels.length);

		for (ItemCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.ItemCategory"));

	public ItemCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemCategoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemCategoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemCategory.class;
	}

	@Override
	public String getModelClassName() {
		return ItemCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemCategoryId", getItemCategoryId());
		attributes.put("itemCategoryName", getItemCategoryName());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("userId", getUserId());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemCategoryId = (Long)attributes.get("itemCategoryId");

		if (itemCategoryId != null) {
			setItemCategoryId(itemCategoryId);
		}

		String itemCategoryName = (String)attributes.get("itemCategoryName");

		if (itemCategoryName != null) {
			setItemCategoryName(itemCategoryName);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getItemCategoryId() {
		return _itemCategoryId;
	}

	@Override
	public void setItemCategoryId(long itemCategoryId) {
		_itemCategoryId = itemCategoryId;
	}

	@JSON
	@Override
	public String getItemCategoryName() {
		if (_itemCategoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemCategoryName;
		}
	}

	@Override
	public void setItemCategoryName(String itemCategoryName) {
		_itemCategoryName = itemCategoryName;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ItemCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemCategoryImpl itemCategoryImpl = new ItemCategoryImpl();

		itemCategoryImpl.setItemCategoryId(getItemCategoryId());
		itemCategoryImpl.setItemCategoryName(getItemCategoryName());
		itemCategoryImpl.setGroupId(getGroupId());
		itemCategoryImpl.setCompanyId(getCompanyId());
		itemCategoryImpl.setCreateDate(getCreateDate());
		itemCategoryImpl.setUserId(getUserId());
		itemCategoryImpl.setModifiedDate(getModifiedDate());

		itemCategoryImpl.resetOriginalValues();

		return itemCategoryImpl;
	}

	@Override
	public int compareTo(ItemCategory itemCategory) {
		long primaryKey = itemCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemCategory)) {
			return false;
		}

		ItemCategory itemCategory = (ItemCategory)obj;

		long primaryKey = itemCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ItemCategoryModelImpl itemCategoryModelImpl = this;

		itemCategoryModelImpl._originalGroupId = itemCategoryModelImpl._groupId;

		itemCategoryModelImpl._setOriginalGroupId = false;

		itemCategoryModelImpl._originalCompanyId = itemCategoryModelImpl._companyId;

		itemCategoryModelImpl._setOriginalCompanyId = false;

		itemCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemCategory> toCacheModel() {
		ItemCategoryCacheModel itemCategoryCacheModel = new ItemCategoryCacheModel();

		itemCategoryCacheModel.itemCategoryId = getItemCategoryId();

		itemCategoryCacheModel.itemCategoryName = getItemCategoryName();

		String itemCategoryName = itemCategoryCacheModel.itemCategoryName;

		if ((itemCategoryName != null) && (itemCategoryName.length() == 0)) {
			itemCategoryCacheModel.itemCategoryName = null;
		}

		itemCategoryCacheModel.groupId = getGroupId();

		itemCategoryCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			itemCategoryCacheModel.createDate = createDate.getTime();
		}
		else {
			itemCategoryCacheModel.createDate = Long.MIN_VALUE;
		}

		itemCategoryCacheModel.userId = getUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			itemCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			itemCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return itemCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{itemCategoryId=");
		sb.append(getItemCategoryId());
		sb.append(", itemCategoryName=");
		sb.append(getItemCategoryName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.ItemCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemCategoryId</column-name><column-value><![CDATA[");
		sb.append(getItemCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCategoryName</column-name><column-value><![CDATA[");
		sb.append(getItemCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ItemCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemCategory.class
		};
	private long _itemCategoryId;
	private String _itemCategoryName;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private long _userId;
	private String _userUuid;
	private Date _modifiedDate;
	private long _columnBitmask;
	private ItemCategory _escapedModel;
}