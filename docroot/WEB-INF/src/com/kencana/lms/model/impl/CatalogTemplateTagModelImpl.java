/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.CatalogTemplateTag;
import com.kencana.lms.model.CatalogTemplateTagModel;
import com.kencana.lms.model.CatalogTemplateTagSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CatalogTemplateTag service. Represents a row in the &quot;Kencana_CatalogTemplateTag&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.CatalogTemplateTagModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogTemplateTagImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogTemplateTagImpl
 * @see com.kencana.lms.model.CatalogTemplateTag
 * @see com.kencana.lms.model.CatalogTemplateTagModel
 * @generated
 */
@JSON(strict = true)
public class CatalogTemplateTagModelImpl extends BaseModelImpl<CatalogTemplateTag>
	implements CatalogTemplateTagModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a catalog template tag model instance should use the {@link com.kencana.lms.model.CatalogTemplateTag} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_CatalogTemplateTag";
	public static final Object[][] TABLE_COLUMNS = {
			{ "catelogTemplateTagId", Types.BIGINT },
			{ "catelogTemplateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "tag", Types.VARCHAR },
			{ "repeatable", Types.BOOLEAN },
			{ "mandatory", Types.BOOLEAN },
			{ "helpText", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_CatalogTemplateTag (catelogTemplateTagId LONG not null primary key,catelogTemplateId LONG,groupId LONG,companyId LONG,tag VARCHAR(75) null,repeatable BOOLEAN,mandatory BOOLEAN,helpText VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_CatalogTemplateTag";
	public static final String ORDER_BY_JPQL = " ORDER BY catalogTemplateTag.tag ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_CatalogTemplateTag.tag ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.CatalogTemplateTag"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.CatalogTemplateTag"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.CatalogTemplateTag"),
			true);
	public static long CATELOGTEMPLATEID_COLUMN_BITMASK = 1L;
	public static long TAG_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CatalogTemplateTag toModel(CatalogTemplateTagSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CatalogTemplateTag model = new CatalogTemplateTagImpl();

		model.setCatelogTemplateTagId(soapModel.getCatelogTemplateTagId());
		model.setCatelogTemplateId(soapModel.getCatelogTemplateId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setTag(soapModel.getTag());
		model.setRepeatable(soapModel.getRepeatable());
		model.setMandatory(soapModel.getMandatory());
		model.setHelpText(soapModel.getHelpText());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CatalogTemplateTag> toModels(
		CatalogTemplateTagSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CatalogTemplateTag> models = new ArrayList<CatalogTemplateTag>(soapModels.length);

		for (CatalogTemplateTagSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.CatalogTemplateTag"));

	public CatalogTemplateTagModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catelogTemplateTagId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatelogTemplateTagId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catelogTemplateTagId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CatalogTemplateTag.class;
	}

	@Override
	public String getModelClassName() {
		return CatalogTemplateTag.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("catelogTemplateTagId", getCatelogTemplateTagId());
		attributes.put("catelogTemplateId", getCatelogTemplateId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("tag", getTag());
		attributes.put("repeatable", getRepeatable());
		attributes.put("mandatory", getMandatory());
		attributes.put("helpText", getHelpText());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long catelogTemplateTagId = (Long)attributes.get("catelogTemplateTagId");

		if (catelogTemplateTagId != null) {
			setCatelogTemplateTagId(catelogTemplateTagId);
		}

		Long catelogTemplateId = (Long)attributes.get("catelogTemplateId");

		if (catelogTemplateId != null) {
			setCatelogTemplateId(catelogTemplateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String tag = (String)attributes.get("tag");

		if (tag != null) {
			setTag(tag);
		}

		Boolean repeatable = (Boolean)attributes.get("repeatable");

		if (repeatable != null) {
			setRepeatable(repeatable);
		}

		Boolean mandatory = (Boolean)attributes.get("mandatory");

		if (mandatory != null) {
			setMandatory(mandatory);
		}

		String helpText = (String)attributes.get("helpText");

		if (helpText != null) {
			setHelpText(helpText);
		}
	}

	@JSON
	@Override
	public long getCatelogTemplateTagId() {
		return _catelogTemplateTagId;
	}

	@Override
	public void setCatelogTemplateTagId(long catelogTemplateTagId) {
		_catelogTemplateTagId = catelogTemplateTagId;
	}

	@JSON
	@Override
	public long getCatelogTemplateId() {
		return _catelogTemplateId;
	}

	@Override
	public void setCatelogTemplateId(long catelogTemplateId) {
		_columnBitmask |= CATELOGTEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalCatelogTemplateId) {
			_setOriginalCatelogTemplateId = true;

			_originalCatelogTemplateId = _catelogTemplateId;
		}

		_catelogTemplateId = catelogTemplateId;
	}

	public long getOriginalCatelogTemplateId() {
		return _originalCatelogTemplateId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getTag() {
		if (_tag == null) {
			return StringPool.BLANK;
		}
		else {
			return _tag;
		}
	}

	@Override
	public void setTag(String tag) {
		_columnBitmask = -1L;

		_tag = tag;
	}

	@JSON
	@Override
	public boolean getRepeatable() {
		return _repeatable;
	}

	@Override
	public boolean isRepeatable() {
		return _repeatable;
	}

	@Override
	public void setRepeatable(boolean repeatable) {
		_repeatable = repeatable;
	}

	@JSON
	@Override
	public boolean getMandatory() {
		return _mandatory;
	}

	@Override
	public boolean isMandatory() {
		return _mandatory;
	}

	@Override
	public void setMandatory(boolean mandatory) {
		_mandatory = mandatory;
	}

	@JSON
	@Override
	public String getHelpText() {
		if (_helpText == null) {
			return StringPool.BLANK;
		}
		else {
			return _helpText;
		}
	}

	@Override
	public void setHelpText(String helpText) {
		_helpText = helpText;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CatalogTemplateTag.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CatalogTemplateTag toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CatalogTemplateTag)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CatalogTemplateTagImpl catalogTemplateTagImpl = new CatalogTemplateTagImpl();

		catalogTemplateTagImpl.setCatelogTemplateTagId(getCatelogTemplateTagId());
		catalogTemplateTagImpl.setCatelogTemplateId(getCatelogTemplateId());
		catalogTemplateTagImpl.setGroupId(getGroupId());
		catalogTemplateTagImpl.setCompanyId(getCompanyId());
		catalogTemplateTagImpl.setTag(getTag());
		catalogTemplateTagImpl.setRepeatable(getRepeatable());
		catalogTemplateTagImpl.setMandatory(getMandatory());
		catalogTemplateTagImpl.setHelpText(getHelpText());

		catalogTemplateTagImpl.resetOriginalValues();

		return catalogTemplateTagImpl;
	}

	@Override
	public int compareTo(CatalogTemplateTag catalogTemplateTag) {
		int value = 0;

		value = getTag().compareToIgnoreCase(catalogTemplateTag.getTag());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CatalogTemplateTag)) {
			return false;
		}

		CatalogTemplateTag catalogTemplateTag = (CatalogTemplateTag)obj;

		long primaryKey = catalogTemplateTag.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CatalogTemplateTagModelImpl catalogTemplateTagModelImpl = this;

		catalogTemplateTagModelImpl._originalCatelogTemplateId = catalogTemplateTagModelImpl._catelogTemplateId;

		catalogTemplateTagModelImpl._setOriginalCatelogTemplateId = false;

		catalogTemplateTagModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CatalogTemplateTag> toCacheModel() {
		CatalogTemplateTagCacheModel catalogTemplateTagCacheModel = new CatalogTemplateTagCacheModel();

		catalogTemplateTagCacheModel.catelogTemplateTagId = getCatelogTemplateTagId();

		catalogTemplateTagCacheModel.catelogTemplateId = getCatelogTemplateId();

		catalogTemplateTagCacheModel.groupId = getGroupId();

		catalogTemplateTagCacheModel.companyId = getCompanyId();

		catalogTemplateTagCacheModel.tag = getTag();

		String tag = catalogTemplateTagCacheModel.tag;

		if ((tag != null) && (tag.length() == 0)) {
			catalogTemplateTagCacheModel.tag = null;
		}

		catalogTemplateTagCacheModel.repeatable = getRepeatable();

		catalogTemplateTagCacheModel.mandatory = getMandatory();

		catalogTemplateTagCacheModel.helpText = getHelpText();

		String helpText = catalogTemplateTagCacheModel.helpText;

		if ((helpText != null) && (helpText.length() == 0)) {
			catalogTemplateTagCacheModel.helpText = null;
		}

		return catalogTemplateTagCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{catelogTemplateTagId=");
		sb.append(getCatelogTemplateTagId());
		sb.append(", catelogTemplateId=");
		sb.append(getCatelogTemplateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", tag=");
		sb.append(getTag());
		sb.append(", repeatable=");
		sb.append(getRepeatable());
		sb.append(", mandatory=");
		sb.append(getMandatory());
		sb.append(", helpText=");
		sb.append(getHelpText());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.CatalogTemplateTag");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>catelogTemplateTagId</column-name><column-value><![CDATA[");
		sb.append(getCatelogTemplateTagId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catelogTemplateId</column-name><column-value><![CDATA[");
		sb.append(getCatelogTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag</column-name><column-value><![CDATA[");
		sb.append(getTag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repeatable</column-name><column-value><![CDATA[");
		sb.append(getRepeatable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mandatory</column-name><column-value><![CDATA[");
		sb.append(getMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>helpText</column-name><column-value><![CDATA[");
		sb.append(getHelpText());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CatalogTemplateTag.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CatalogTemplateTag.class
		};
	private long _catelogTemplateTagId;
	private long _catelogTemplateId;
	private long _originalCatelogTemplateId;
	private boolean _setOriginalCatelogTemplateId;
	private long _groupId;
	private long _companyId;
	private String _tag;
	private boolean _repeatable;
	private boolean _mandatory;
	private String _helpText;
	private long _columnBitmask;
	private CatalogTemplateTag _escapedModel;
}