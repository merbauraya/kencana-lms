/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.PatronCategory;
import com.kencana.lms.model.PatronCategoryModel;
import com.kencana.lms.model.PatronCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PatronCategory service. Represents a row in the &quot;Kencana_PatronCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.PatronCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatronCategoryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see PatronCategoryImpl
 * @see com.kencana.lms.model.PatronCategory
 * @see com.kencana.lms.model.PatronCategoryModel
 * @generated
 */
@JSON(strict = true)
public class PatronCategoryModelImpl extends BaseModelImpl<PatronCategory>
	implements PatronCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patron category model instance should use the {@link com.kencana.lms.model.PatronCategory} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_PatronCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patronCategoryId", Types.BIGINT },
			{ "patronCategoryName", Types.VARCHAR },
			{ "notes", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_PatronCategory (patronCategoryId LONG not null primary key,patronCategoryName VARCHAR(75) null,notes STRING null,groupId LONG,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_PatronCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY patronCategory.patronCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_PatronCategory.patronCategoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.PatronCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.PatronCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.PatronCategory"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PATRONCATEGORYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PatronCategory toModel(PatronCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PatronCategory model = new PatronCategoryImpl();

		model.setPatronCategoryId(soapModel.getPatronCategoryId());
		model.setPatronCategoryName(soapModel.getPatronCategoryName());
		model.setNotes(soapModel.getNotes());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PatronCategory> toModels(PatronCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PatronCategory> models = new ArrayList<PatronCategory>(soapModels.length);

		for (PatronCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.PatronCategory"));

	public PatronCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patronCategoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatronCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patronCategoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PatronCategory.class;
	}

	@Override
	public String getModelClassName() {
		return PatronCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patronCategoryId", getPatronCategoryId());
		attributes.put("patronCategoryName", getPatronCategoryName());
		attributes.put("notes", getNotes());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patronCategoryId = (Long)attributes.get("patronCategoryId");

		if (patronCategoryId != null) {
			setPatronCategoryId(patronCategoryId);
		}

		String patronCategoryName = (String)attributes.get("patronCategoryName");

		if (patronCategoryName != null) {
			setPatronCategoryName(patronCategoryName);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@JSON
	@Override
	public long getPatronCategoryId() {
		return _patronCategoryId;
	}

	@Override
	public void setPatronCategoryId(long patronCategoryId) {
		_patronCategoryId = patronCategoryId;
	}

	@JSON
	@Override
	public String getPatronCategoryName() {
		if (_patronCategoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _patronCategoryName;
		}
	}

	@Override
	public void setPatronCategoryName(String patronCategoryName) {
		_patronCategoryName = patronCategoryName;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PatronCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PatronCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PatronCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatronCategoryImpl patronCategoryImpl = new PatronCategoryImpl();

		patronCategoryImpl.setPatronCategoryId(getPatronCategoryId());
		patronCategoryImpl.setPatronCategoryName(getPatronCategoryName());
		patronCategoryImpl.setNotes(getNotes());
		patronCategoryImpl.setGroupId(getGroupId());
		patronCategoryImpl.setCompanyId(getCompanyId());

		patronCategoryImpl.resetOriginalValues();

		return patronCategoryImpl;
	}

	@Override
	public int compareTo(PatronCategory patronCategory) {
		long primaryKey = patronCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PatronCategory)) {
			return false;
		}

		PatronCategory patronCategory = (PatronCategory)obj;

		long primaryKey = patronCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PatronCategoryModelImpl patronCategoryModelImpl = this;

		patronCategoryModelImpl._originalGroupId = patronCategoryModelImpl._groupId;

		patronCategoryModelImpl._setOriginalGroupId = false;

		patronCategoryModelImpl._originalCompanyId = patronCategoryModelImpl._companyId;

		patronCategoryModelImpl._setOriginalCompanyId = false;

		patronCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PatronCategory> toCacheModel() {
		PatronCategoryCacheModel patronCategoryCacheModel = new PatronCategoryCacheModel();

		patronCategoryCacheModel.patronCategoryId = getPatronCategoryId();

		patronCategoryCacheModel.patronCategoryName = getPatronCategoryName();

		String patronCategoryName = patronCategoryCacheModel.patronCategoryName;

		if ((patronCategoryName != null) && (patronCategoryName.length() == 0)) {
			patronCategoryCacheModel.patronCategoryName = null;
		}

		patronCategoryCacheModel.notes = getNotes();

		String notes = patronCategoryCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			patronCategoryCacheModel.notes = null;
		}

		patronCategoryCacheModel.groupId = getGroupId();

		patronCategoryCacheModel.companyId = getCompanyId();

		return patronCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{patronCategoryId=");
		sb.append(getPatronCategoryId());
		sb.append(", patronCategoryName=");
		sb.append(getPatronCategoryName());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.PatronCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patronCategoryId</column-name><column-value><![CDATA[");
		sb.append(getPatronCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patronCategoryName</column-name><column-value><![CDATA[");
		sb.append(getPatronCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PatronCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PatronCategory.class
		};
	private long _patronCategoryId;
	private String _patronCategoryName;
	private String _notes;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private PatronCategory _escapedModel;
}