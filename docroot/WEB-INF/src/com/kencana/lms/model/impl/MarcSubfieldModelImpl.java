/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.MarcSubfield;
import com.kencana.lms.model.MarcSubfieldModel;
import com.kencana.lms.model.MarcSubfieldSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MarcSubfield service. Represents a row in the &quot;Kencana_MarcSubfield&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.MarcSubfieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarcSubfieldImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MarcSubfieldImpl
 * @see com.kencana.lms.model.MarcSubfield
 * @see com.kencana.lms.model.MarcSubfieldModel
 * @generated
 */
@JSON(strict = true)
public class MarcSubfieldModelImpl extends BaseModelImpl<MarcSubfield>
	implements MarcSubfieldModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marc subfield model instance should use the {@link com.kencana.lms.model.MarcSubfield} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_MarcSubfield";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MarcSubfieldId", Types.BIGINT },
			{ "tag", Types.VARCHAR },
			{ "tagType", Types.VARCHAR },
			{ "subfield", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "repetable", Types.BOOLEAN },
			{ "mandatory", Types.BOOLEAN },
			{ "authorisedValue", Types.VARCHAR },
			{ "authTypeCode", Types.VARCHAR },
			{ "isURL", Types.BOOLEAN },
			{ "helpText", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_MarcSubfield (MarcSubfieldId LONG not null primary key,tag VARCHAR(75) null,tagType VARCHAR(75) null,subfield VARCHAR(75) null,description VARCHAR(75) null,repetable BOOLEAN,mandatory BOOLEAN,authorisedValue VARCHAR(75) null,authTypeCode VARCHAR(75) null,isURL BOOLEAN,helpText VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_MarcSubfield";
	public static final String ORDER_BY_JPQL = " ORDER BY marcSubfield.tag ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_MarcSubfield.tag ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.MarcSubfield"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.MarcSubfield"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.MarcSubfield"),
			true);
	public static long SUBFIELD_COLUMN_BITMASK = 1L;
	public static long TAG_COLUMN_BITMASK = 2L;
	public static long TAGTYPE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarcSubfield toModel(MarcSubfieldSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarcSubfield model = new MarcSubfieldImpl();

		model.setMarcSubfieldId(soapModel.getMarcSubfieldId());
		model.setTag(soapModel.getTag());
		model.setTagType(soapModel.getTagType());
		model.setSubfield(soapModel.getSubfield());
		model.setDescription(soapModel.getDescription());
		model.setRepetable(soapModel.getRepetable());
		model.setMandatory(soapModel.getMandatory());
		model.setAuthorisedValue(soapModel.getAuthorisedValue());
		model.setAuthTypeCode(soapModel.getAuthTypeCode());
		model.setIsURL(soapModel.getIsURL());
		model.setHelpText(soapModel.getHelpText());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarcSubfield> toModels(MarcSubfieldSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarcSubfield> models = new ArrayList<MarcSubfield>(soapModels.length);

		for (MarcSubfieldSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.MarcSubfield"));

	public MarcSubfieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _MarcSubfieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarcSubfieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _MarcSubfieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarcSubfield.class;
	}

	@Override
	public String getModelClassName() {
		return MarcSubfield.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("MarcSubfieldId", getMarcSubfieldId());
		attributes.put("tag", getTag());
		attributes.put("tagType", getTagType());
		attributes.put("subfield", getSubfield());
		attributes.put("description", getDescription());
		attributes.put("repetable", getRepetable());
		attributes.put("mandatory", getMandatory());
		attributes.put("authorisedValue", getAuthorisedValue());
		attributes.put("authTypeCode", getAuthTypeCode());
		attributes.put("isURL", getIsURL());
		attributes.put("helpText", getHelpText());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long MarcSubfieldId = (Long)attributes.get("MarcSubfieldId");

		if (MarcSubfieldId != null) {
			setMarcSubfieldId(MarcSubfieldId);
		}

		String tag = (String)attributes.get("tag");

		if (tag != null) {
			setTag(tag);
		}

		String tagType = (String)attributes.get("tagType");

		if (tagType != null) {
			setTagType(tagType);
		}

		String subfield = (String)attributes.get("subfield");

		if (subfield != null) {
			setSubfield(subfield);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean repetable = (Boolean)attributes.get("repetable");

		if (repetable != null) {
			setRepetable(repetable);
		}

		Boolean mandatory = (Boolean)attributes.get("mandatory");

		if (mandatory != null) {
			setMandatory(mandatory);
		}

		String authorisedValue = (String)attributes.get("authorisedValue");

		if (authorisedValue != null) {
			setAuthorisedValue(authorisedValue);
		}

		String authTypeCode = (String)attributes.get("authTypeCode");

		if (authTypeCode != null) {
			setAuthTypeCode(authTypeCode);
		}

		Boolean isURL = (Boolean)attributes.get("isURL");

		if (isURL != null) {
			setIsURL(isURL);
		}

		String helpText = (String)attributes.get("helpText");

		if (helpText != null) {
			setHelpText(helpText);
		}
	}

	@JSON
	@Override
	public long getMarcSubfieldId() {
		return _MarcSubfieldId;
	}

	@Override
	public void setMarcSubfieldId(long MarcSubfieldId) {
		_MarcSubfieldId = MarcSubfieldId;
	}

	@JSON
	@Override
	public String getTag() {
		if (_tag == null) {
			return StringPool.BLANK;
		}
		else {
			return _tag;
		}
	}

	@Override
	public void setTag(String tag) {
		_columnBitmask = -1L;

		if (_originalTag == null) {
			_originalTag = _tag;
		}

		_tag = tag;
	}

	public String getOriginalTag() {
		return GetterUtil.getString(_originalTag);
	}

	@JSON
	@Override
	public String getTagType() {
		if (_tagType == null) {
			return StringPool.BLANK;
		}
		else {
			return _tagType;
		}
	}

	@Override
	public void setTagType(String tagType) {
		_columnBitmask |= TAGTYPE_COLUMN_BITMASK;

		if (_originalTagType == null) {
			_originalTagType = _tagType;
		}

		_tagType = tagType;
	}

	public String getOriginalTagType() {
		return GetterUtil.getString(_originalTagType);
	}

	@JSON
	@Override
	public String getSubfield() {
		if (_subfield == null) {
			return StringPool.BLANK;
		}
		else {
			return _subfield;
		}
	}

	@Override
	public void setSubfield(String subfield) {
		_columnBitmask |= SUBFIELD_COLUMN_BITMASK;

		if (_originalSubfield == null) {
			_originalSubfield = _subfield;
		}

		_subfield = subfield;
	}

	public String getOriginalSubfield() {
		return GetterUtil.getString(_originalSubfield);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public boolean getRepetable() {
		return _repetable;
	}

	@Override
	public boolean isRepetable() {
		return _repetable;
	}

	@Override
	public void setRepetable(boolean repetable) {
		_repetable = repetable;
	}

	@JSON
	@Override
	public boolean getMandatory() {
		return _mandatory;
	}

	@Override
	public boolean isMandatory() {
		return _mandatory;
	}

	@Override
	public void setMandatory(boolean mandatory) {
		_mandatory = mandatory;
	}

	@JSON
	@Override
	public String getAuthorisedValue() {
		if (_authorisedValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorisedValue;
		}
	}

	@Override
	public void setAuthorisedValue(String authorisedValue) {
		_authorisedValue = authorisedValue;
	}

	@JSON
	@Override
	public String getAuthTypeCode() {
		if (_authTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _authTypeCode;
		}
	}

	@Override
	public void setAuthTypeCode(String authTypeCode) {
		_authTypeCode = authTypeCode;
	}

	@JSON
	@Override
	public boolean getIsURL() {
		return _isURL;
	}

	@Override
	public boolean isIsURL() {
		return _isURL;
	}

	@Override
	public void setIsURL(boolean isURL) {
		_isURL = isURL;
	}

	@JSON
	@Override
	public String getHelpText() {
		if (_helpText == null) {
			return StringPool.BLANK;
		}
		else {
			return _helpText;
		}
	}

	@Override
	public void setHelpText(String helpText) {
		_helpText = helpText;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MarcSubfield.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MarcSubfield toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarcSubfield)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarcSubfieldImpl marcSubfieldImpl = new MarcSubfieldImpl();

		marcSubfieldImpl.setMarcSubfieldId(getMarcSubfieldId());
		marcSubfieldImpl.setTag(getTag());
		marcSubfieldImpl.setTagType(getTagType());
		marcSubfieldImpl.setSubfield(getSubfield());
		marcSubfieldImpl.setDescription(getDescription());
		marcSubfieldImpl.setRepetable(getRepetable());
		marcSubfieldImpl.setMandatory(getMandatory());
		marcSubfieldImpl.setAuthorisedValue(getAuthorisedValue());
		marcSubfieldImpl.setAuthTypeCode(getAuthTypeCode());
		marcSubfieldImpl.setIsURL(getIsURL());
		marcSubfieldImpl.setHelpText(getHelpText());

		marcSubfieldImpl.resetOriginalValues();

		return marcSubfieldImpl;
	}

	@Override
	public int compareTo(MarcSubfield marcSubfield) {
		int value = 0;

		value = getTag().compareToIgnoreCase(marcSubfield.getTag());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarcSubfield)) {
			return false;
		}

		MarcSubfield marcSubfield = (MarcSubfield)obj;

		long primaryKey = marcSubfield.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MarcSubfieldModelImpl marcSubfieldModelImpl = this;

		marcSubfieldModelImpl._originalTag = marcSubfieldModelImpl._tag;

		marcSubfieldModelImpl._originalTagType = marcSubfieldModelImpl._tagType;

		marcSubfieldModelImpl._originalSubfield = marcSubfieldModelImpl._subfield;

		marcSubfieldModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarcSubfield> toCacheModel() {
		MarcSubfieldCacheModel marcSubfieldCacheModel = new MarcSubfieldCacheModel();

		marcSubfieldCacheModel.MarcSubfieldId = getMarcSubfieldId();

		marcSubfieldCacheModel.tag = getTag();

		String tag = marcSubfieldCacheModel.tag;

		if ((tag != null) && (tag.length() == 0)) {
			marcSubfieldCacheModel.tag = null;
		}

		marcSubfieldCacheModel.tagType = getTagType();

		String tagType = marcSubfieldCacheModel.tagType;

		if ((tagType != null) && (tagType.length() == 0)) {
			marcSubfieldCacheModel.tagType = null;
		}

		marcSubfieldCacheModel.subfield = getSubfield();

		String subfield = marcSubfieldCacheModel.subfield;

		if ((subfield != null) && (subfield.length() == 0)) {
			marcSubfieldCacheModel.subfield = null;
		}

		marcSubfieldCacheModel.description = getDescription();

		String description = marcSubfieldCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			marcSubfieldCacheModel.description = null;
		}

		marcSubfieldCacheModel.repetable = getRepetable();

		marcSubfieldCacheModel.mandatory = getMandatory();

		marcSubfieldCacheModel.authorisedValue = getAuthorisedValue();

		String authorisedValue = marcSubfieldCacheModel.authorisedValue;

		if ((authorisedValue != null) && (authorisedValue.length() == 0)) {
			marcSubfieldCacheModel.authorisedValue = null;
		}

		marcSubfieldCacheModel.authTypeCode = getAuthTypeCode();

		String authTypeCode = marcSubfieldCacheModel.authTypeCode;

		if ((authTypeCode != null) && (authTypeCode.length() == 0)) {
			marcSubfieldCacheModel.authTypeCode = null;
		}

		marcSubfieldCacheModel.isURL = getIsURL();

		marcSubfieldCacheModel.helpText = getHelpText();

		String helpText = marcSubfieldCacheModel.helpText;

		if ((helpText != null) && (helpText.length() == 0)) {
			marcSubfieldCacheModel.helpText = null;
		}

		return marcSubfieldCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{MarcSubfieldId=");
		sb.append(getMarcSubfieldId());
		sb.append(", tag=");
		sb.append(getTag());
		sb.append(", tagType=");
		sb.append(getTagType());
		sb.append(", subfield=");
		sb.append(getSubfield());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", repetable=");
		sb.append(getRepetable());
		sb.append(", mandatory=");
		sb.append(getMandatory());
		sb.append(", authorisedValue=");
		sb.append(getAuthorisedValue());
		sb.append(", authTypeCode=");
		sb.append(getAuthTypeCode());
		sb.append(", isURL=");
		sb.append(getIsURL());
		sb.append(", helpText=");
		sb.append(getHelpText());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.MarcSubfield");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>MarcSubfieldId</column-name><column-value><![CDATA[");
		sb.append(getMarcSubfieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag</column-name><column-value><![CDATA[");
		sb.append(getTag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tagType</column-name><column-value><![CDATA[");
		sb.append(getTagType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subfield</column-name><column-value><![CDATA[");
		sb.append(getSubfield());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repetable</column-name><column-value><![CDATA[");
		sb.append(getRepetable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mandatory</column-name><column-value><![CDATA[");
		sb.append(getMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorisedValue</column-name><column-value><![CDATA[");
		sb.append(getAuthorisedValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authTypeCode</column-name><column-value><![CDATA[");
		sb.append(getAuthTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isURL</column-name><column-value><![CDATA[");
		sb.append(getIsURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>helpText</column-name><column-value><![CDATA[");
		sb.append(getHelpText());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MarcSubfield.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MarcSubfield.class
		};
	private long _MarcSubfieldId;
	private String _tag;
	private String _originalTag;
	private String _tagType;
	private String _originalTagType;
	private String _subfield;
	private String _originalSubfield;
	private String _description;
	private boolean _repetable;
	private boolean _mandatory;
	private String _authorisedValue;
	private String _authTypeCode;
	private boolean _isURL;
	private String _helpText;
	private long _columnBitmask;
	private MarcSubfield _escapedModel;
}