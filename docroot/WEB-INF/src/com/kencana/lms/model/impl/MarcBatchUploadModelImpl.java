/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.MarcBatchUpload;
import com.kencana.lms.model.MarcBatchUploadModel;
import com.kencana.lms.model.MarcBatchUploadSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MarcBatchUpload service. Represents a row in the &quot;Kencana_MarcBatchUpload&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.MarcBatchUploadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarcBatchUploadImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MarcBatchUploadImpl
 * @see com.kencana.lms.model.MarcBatchUpload
 * @see com.kencana.lms.model.MarcBatchUploadModel
 * @generated
 */
@JSON(strict = true)
public class MarcBatchUploadModelImpl extends BaseModelImpl<MarcBatchUpload>
	implements MarcBatchUploadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marc batch upload model instance should use the {@link com.kencana.lms.model.MarcBatchUpload} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_MarcBatchUpload";
	public static final Object[][] TABLE_COLUMNS = {
			{ "marcBatchUploadId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "processed", Types.BOOLEAN },
			{ "importDate", Types.TIMESTAMP },
			{ "importByUserId", Types.BIGINT },
			{ "partialImport", Types.BOOLEAN },
			{ "fileCount", Types.INTEGER },
			{ "description", Types.VARCHAR },
			{ "recordCount", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_MarcBatchUpload (marcBatchUploadId LONG not null primary key,groupId LONG,companyId LONG,createBy LONG,createdDate DATE null,processed BOOLEAN,importDate DATE null,importByUserId LONG,partialImport BOOLEAN,fileCount INTEGER,description VARCHAR(75) null,recordCount INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_MarcBatchUpload";
	public static final String ORDER_BY_JPQL = " ORDER BY marcBatchUpload.marcBatchUploadId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_MarcBatchUpload.marcBatchUploadId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.MarcBatchUpload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.MarcBatchUpload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kencana.lms.model.MarcBatchUpload"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PROCESSED_COLUMN_BITMASK = 4L;
	public static long MARCBATCHUPLOADID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarcBatchUpload toModel(MarcBatchUploadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarcBatchUpload model = new MarcBatchUploadImpl();

		model.setMarcBatchUploadId(soapModel.getMarcBatchUploadId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateBy(soapModel.getCreateBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setProcessed(soapModel.getProcessed());
		model.setImportDate(soapModel.getImportDate());
		model.setImportByUserId(soapModel.getImportByUserId());
		model.setPartialImport(soapModel.getPartialImport());
		model.setFileCount(soapModel.getFileCount());
		model.setDescription(soapModel.getDescription());
		model.setRecordCount(soapModel.getRecordCount());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarcBatchUpload> toModels(
		MarcBatchUploadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarcBatchUpload> models = new ArrayList<MarcBatchUpload>(soapModels.length);

		for (MarcBatchUploadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.MarcBatchUpload"));

	public MarcBatchUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _marcBatchUploadId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarcBatchUploadId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _marcBatchUploadId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarcBatchUpload.class;
	}

	@Override
	public String getModelClassName() {
		return MarcBatchUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("marcBatchUploadId", getMarcBatchUploadId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createBy", getCreateBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("processed", getProcessed());
		attributes.put("importDate", getImportDate());
		attributes.put("importByUserId", getImportByUserId());
		attributes.put("partialImport", getPartialImport());
		attributes.put("fileCount", getFileCount());
		attributes.put("description", getDescription());
		attributes.put("recordCount", getRecordCount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long marcBatchUploadId = (Long)attributes.get("marcBatchUploadId");

		if (marcBatchUploadId != null) {
			setMarcBatchUploadId(marcBatchUploadId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Boolean processed = (Boolean)attributes.get("processed");

		if (processed != null) {
			setProcessed(processed);
		}

		Date importDate = (Date)attributes.get("importDate");

		if (importDate != null) {
			setImportDate(importDate);
		}

		Long importByUserId = (Long)attributes.get("importByUserId");

		if (importByUserId != null) {
			setImportByUserId(importByUserId);
		}

		Boolean partialImport = (Boolean)attributes.get("partialImport");

		if (partialImport != null) {
			setPartialImport(partialImport);
		}

		Integer fileCount = (Integer)attributes.get("fileCount");

		if (fileCount != null) {
			setFileCount(fileCount);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer recordCount = (Integer)attributes.get("recordCount");

		if (recordCount != null) {
			setRecordCount(recordCount);
		}
	}

	@JSON
	@Override
	public long getMarcBatchUploadId() {
		return _marcBatchUploadId;
	}

	@Override
	public void setMarcBatchUploadId(long marcBatchUploadId) {
		_marcBatchUploadId = marcBatchUploadId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public boolean getProcessed() {
		return _processed;
	}

	@Override
	public boolean isProcessed() {
		return _processed;
	}

	@Override
	public void setProcessed(boolean processed) {
		_columnBitmask |= PROCESSED_COLUMN_BITMASK;

		if (!_setOriginalProcessed) {
			_setOriginalProcessed = true;

			_originalProcessed = _processed;
		}

		_processed = processed;
	}

	public boolean getOriginalProcessed() {
		return _originalProcessed;
	}

	@JSON
	@Override
	public Date getImportDate() {
		return _importDate;
	}

	@Override
	public void setImportDate(Date importDate) {
		_importDate = importDate;
	}

	@JSON
	@Override
	public long getImportByUserId() {
		return _importByUserId;
	}

	@Override
	public void setImportByUserId(long importByUserId) {
		_importByUserId = importByUserId;
	}

	@Override
	public String getImportByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getImportByUserId(), "uuid",
			_importByUserUuid);
	}

	@Override
	public void setImportByUserUuid(String importByUserUuid) {
		_importByUserUuid = importByUserUuid;
	}

	@JSON
	@Override
	public boolean getPartialImport() {
		return _partialImport;
	}

	@Override
	public boolean isPartialImport() {
		return _partialImport;
	}

	@Override
	public void setPartialImport(boolean partialImport) {
		_partialImport = partialImport;
	}

	@JSON
	@Override
	public int getFileCount() {
		return _fileCount;
	}

	@Override
	public void setFileCount(int fileCount) {
		_fileCount = fileCount;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getRecordCount() {
		return _recordCount;
	}

	@Override
	public void setRecordCount(int recordCount) {
		_recordCount = recordCount;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MarcBatchUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MarcBatchUpload toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarcBatchUpload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarcBatchUploadImpl marcBatchUploadImpl = new MarcBatchUploadImpl();

		marcBatchUploadImpl.setMarcBatchUploadId(getMarcBatchUploadId());
		marcBatchUploadImpl.setGroupId(getGroupId());
		marcBatchUploadImpl.setCompanyId(getCompanyId());
		marcBatchUploadImpl.setCreateBy(getCreateBy());
		marcBatchUploadImpl.setCreatedDate(getCreatedDate());
		marcBatchUploadImpl.setProcessed(getProcessed());
		marcBatchUploadImpl.setImportDate(getImportDate());
		marcBatchUploadImpl.setImportByUserId(getImportByUserId());
		marcBatchUploadImpl.setPartialImport(getPartialImport());
		marcBatchUploadImpl.setFileCount(getFileCount());
		marcBatchUploadImpl.setDescription(getDescription());
		marcBatchUploadImpl.setRecordCount(getRecordCount());

		marcBatchUploadImpl.resetOriginalValues();

		return marcBatchUploadImpl;
	}

	@Override
	public int compareTo(MarcBatchUpload marcBatchUpload) {
		long primaryKey = marcBatchUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarcBatchUpload)) {
			return false;
		}

		MarcBatchUpload marcBatchUpload = (MarcBatchUpload)obj;

		long primaryKey = marcBatchUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MarcBatchUploadModelImpl marcBatchUploadModelImpl = this;

		marcBatchUploadModelImpl._originalGroupId = marcBatchUploadModelImpl._groupId;

		marcBatchUploadModelImpl._setOriginalGroupId = false;

		marcBatchUploadModelImpl._originalCompanyId = marcBatchUploadModelImpl._companyId;

		marcBatchUploadModelImpl._setOriginalCompanyId = false;

		marcBatchUploadModelImpl._originalProcessed = marcBatchUploadModelImpl._processed;

		marcBatchUploadModelImpl._setOriginalProcessed = false;

		marcBatchUploadModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarcBatchUpload> toCacheModel() {
		MarcBatchUploadCacheModel marcBatchUploadCacheModel = new MarcBatchUploadCacheModel();

		marcBatchUploadCacheModel.marcBatchUploadId = getMarcBatchUploadId();

		marcBatchUploadCacheModel.groupId = getGroupId();

		marcBatchUploadCacheModel.companyId = getCompanyId();

		marcBatchUploadCacheModel.createBy = getCreateBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			marcBatchUploadCacheModel.createdDate = createdDate.getTime();
		}
		else {
			marcBatchUploadCacheModel.createdDate = Long.MIN_VALUE;
		}

		marcBatchUploadCacheModel.processed = getProcessed();

		Date importDate = getImportDate();

		if (importDate != null) {
			marcBatchUploadCacheModel.importDate = importDate.getTime();
		}
		else {
			marcBatchUploadCacheModel.importDate = Long.MIN_VALUE;
		}

		marcBatchUploadCacheModel.importByUserId = getImportByUserId();

		marcBatchUploadCacheModel.partialImport = getPartialImport();

		marcBatchUploadCacheModel.fileCount = getFileCount();

		marcBatchUploadCacheModel.description = getDescription();

		String description = marcBatchUploadCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			marcBatchUploadCacheModel.description = null;
		}

		marcBatchUploadCacheModel.recordCount = getRecordCount();

		return marcBatchUploadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{marcBatchUploadId=");
		sb.append(getMarcBatchUploadId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", processed=");
		sb.append(getProcessed());
		sb.append(", importDate=");
		sb.append(getImportDate());
		sb.append(", importByUserId=");
		sb.append(getImportByUserId());
		sb.append(", partialImport=");
		sb.append(getPartialImport());
		sb.append(", fileCount=");
		sb.append(getFileCount());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", recordCount=");
		sb.append(getRecordCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.MarcBatchUpload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>marcBatchUploadId</column-name><column-value><![CDATA[");
		sb.append(getMarcBatchUploadId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processed</column-name><column-value><![CDATA[");
		sb.append(getProcessed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importDate</column-name><column-value><![CDATA[");
		sb.append(getImportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importByUserId</column-name><column-value><![CDATA[");
		sb.append(getImportByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partialImport</column-name><column-value><![CDATA[");
		sb.append(getPartialImport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileCount</column-name><column-value><![CDATA[");
		sb.append(getFileCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordCount</column-name><column-value><![CDATA[");
		sb.append(getRecordCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MarcBatchUpload.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MarcBatchUpload.class
		};
	private long _marcBatchUploadId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createBy;
	private Date _createdDate;
	private boolean _processed;
	private boolean _originalProcessed;
	private boolean _setOriginalProcessed;
	private Date _importDate;
	private long _importByUserId;
	private String _importByUserUuid;
	private boolean _partialImport;
	private int _fileCount;
	private String _description;
	private int _recordCount;
	private long _columnBitmask;
	private MarcBatchUpload _escapedModel;
}