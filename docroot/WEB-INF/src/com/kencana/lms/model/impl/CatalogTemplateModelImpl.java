/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kencana.lms.model.impl;

import com.kencana.lms.model.CatalogTemplate;
import com.kencana.lms.model.CatalogTemplateModel;
import com.kencana.lms.model.CatalogTemplateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CatalogTemplate service. Represents a row in the &quot;Kencana_CatalogTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kencana.lms.model.CatalogTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogTemplateImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see CatalogTemplateImpl
 * @see com.kencana.lms.model.CatalogTemplate
 * @see com.kencana.lms.model.CatalogTemplateModel
 * @generated
 */
@JSON(strict = true)
public class CatalogTemplateModelImpl extends BaseModelImpl<CatalogTemplate>
	implements CatalogTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a catalog template model instance should use the {@link com.kencana.lms.model.CatalogTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "Kencana_CatalogTemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "templateId", Types.BIGINT },
			{ "templateName", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "createBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Kencana_CatalogTemplate (templateId LONG not null primary key,templateName VARCHAR(75) null,groupId LONG,companyId LONG,description VARCHAR(75) null,active_ BOOLEAN,createBy LONG,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Kencana_CatalogTemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY catalogTemplate.templateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Kencana_CatalogTemplate.templateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kencana.lms.model.CatalogTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kencana.lms.model.CatalogTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CatalogTemplate toModel(CatalogTemplateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CatalogTemplate model = new CatalogTemplateImpl();

		model.setTemplateId(soapModel.getTemplateId());
		model.setTemplateName(soapModel.getTemplateName());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setDescription(soapModel.getDescription());
		model.setActive(soapModel.getActive());
		model.setCreateBy(soapModel.getCreateBy());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CatalogTemplate> toModels(
		CatalogTemplateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CatalogTemplate> models = new ArrayList<CatalogTemplate>(soapModels.length);

		for (CatalogTemplateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kencana.lms.model.CatalogTemplate"));

	public CatalogTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _templateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _templateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CatalogTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return CatalogTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("templateId", getTemplateId());
		attributes.put("templateName", getTemplateName());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("description", getDescription());
		attributes.put("active", getActive());
		attributes.put("createBy", getCreateBy());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		String templateName = (String)attributes.get("templateName");

		if (templateName != null) {
			setTemplateName(templateName);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		_templateId = templateId;
	}

	@JSON
	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		_templateName = templateName;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CatalogTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CatalogTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CatalogTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CatalogTemplateImpl catalogTemplateImpl = new CatalogTemplateImpl();

		catalogTemplateImpl.setTemplateId(getTemplateId());
		catalogTemplateImpl.setTemplateName(getTemplateName());
		catalogTemplateImpl.setGroupId(getGroupId());
		catalogTemplateImpl.setCompanyId(getCompanyId());
		catalogTemplateImpl.setDescription(getDescription());
		catalogTemplateImpl.setActive(getActive());
		catalogTemplateImpl.setCreateBy(getCreateBy());
		catalogTemplateImpl.setCreatedDate(getCreatedDate());

		catalogTemplateImpl.resetOriginalValues();

		return catalogTemplateImpl;
	}

	@Override
	public int compareTo(CatalogTemplate catalogTemplate) {
		long primaryKey = catalogTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CatalogTemplate)) {
			return false;
		}

		CatalogTemplate catalogTemplate = (CatalogTemplate)obj;

		long primaryKey = catalogTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CatalogTemplate> toCacheModel() {
		CatalogTemplateCacheModel catalogTemplateCacheModel = new CatalogTemplateCacheModel();

		catalogTemplateCacheModel.templateId = getTemplateId();

		catalogTemplateCacheModel.templateName = getTemplateName();

		String templateName = catalogTemplateCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			catalogTemplateCacheModel.templateName = null;
		}

		catalogTemplateCacheModel.groupId = getGroupId();

		catalogTemplateCacheModel.companyId = getCompanyId();

		catalogTemplateCacheModel.description = getDescription();

		String description = catalogTemplateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			catalogTemplateCacheModel.description = null;
		}

		catalogTemplateCacheModel.active = getActive();

		catalogTemplateCacheModel.createBy = getCreateBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			catalogTemplateCacheModel.createdDate = createdDate.getTime();
		}
		else {
			catalogTemplateCacheModel.createdDate = Long.MIN_VALUE;
		}

		return catalogTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{templateId=");
		sb.append(getTemplateId());
		sb.append(", templateName=");
		sb.append(getTemplateName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.kencana.lms.model.CatalogTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateName</column-name><column-value><![CDATA[");
		sb.append(getTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CatalogTemplate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CatalogTemplate.class
		};
	private long _templateId;
	private String _templateName;
	private long _groupId;
	private long _companyId;
	private String _description;
	private boolean _active;
	private long _createBy;
	private Date _createdDate;
	private CatalogTemplate _escapedModel;
}